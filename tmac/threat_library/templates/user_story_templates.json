[
    {
        "category": "Session Management",
        "sub_category": "Fundamental Session Management Security",
        "id": "ASVS-3.1.1",
        "description": "Verify the application never reveals session tokens in URL parameters.",
        "cwe_ids": [
            598
        ],
        "nist": [],
        "feature_name": "Do not expose session token in URL",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": [
            "https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/06-Session_Management_Testing/04-Testing_for_Exposed_Session_Variables.html"
        ]
    },
    {
        "category": "Session Management",
        "sub_category": "Session Binding",
        "id": "ASVS-3.2.1",
        "description": "Verify the application generates a new session token on user authentication.",
        "cwe_ids": [
            384
        ],
        "nist": [
            "7.1"
        ],
        "feature_name": "Generate a new session token after authentication",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": [
            "https://owasp-top-10-proactive-controls-2018.readthedocs.io/en/latest/c6-implement-digital-identity.html",
            "https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/06-Session_Management_Testing/03-Testing_for_Session_Fixation.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html"
        ]
    },
    {
        "category": "Session Management",
        "sub_category": "Session Binding",
        "id": "ASVS-3.2.2",
        "description": "Verify that session tokens possess at least 64 bits of entropy.",
        "cwe_ids": [
            331
        ],
        "nist": [
            "7.1"
        ],
        "feature_name": "Enforce high entropy session tokens",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [
            "Cryptography"
        ],
        "references": [
            "https://owasp-top-10-proactive-controls-2018.readthedocs.io/en/latest/c6-implement-digital-identity.html",
            "https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/06-Session_Management_Testing/01-Testing_for_Session_Management_Schema.html#gray-box-testing-and-example",
            "https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html"
        ]
    },
    {
        "category": "Session Management",
        "sub_category": "Session Binding",
        "id": "ASVS-3.2.3",
        "description": "Verify the application only stores session tokens in the browser using secure methods such as appropriately secured cookies (see section 3.4) or HTML 5 session storage.",
        "cwe_ids": [
            539
        ],
        "nist": [
            "7.1"
        ],
        "feature_name": "When storing session tokens in browers, use secure methods only",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": [
            "https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes.html; https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/11-Client_Side_Testing/12-Testing_Browser_Storage.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html"
        ]
    },
    {
        "category": "Session Management",
        "sub_category": "Session Binding",
        "id": "ASVS-3.2.4",
        "description": "Verify that session tokens are generated using approved cryptographic algorithms.",
        "cwe_ids": [
            331
        ],
        "nist": [
            "7.1"
        ],
        "feature_name": "Ensure secure algorithms for generating session tokens",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [
            "Cryptography"
        ],
        "references": [
            "https://owasp-top-10-proactive-controls-2018.readthedocs.io/en/latest/c6-implement-digital-identity.html",
            "https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/06-Session_Management_Testing/01-Testing_for_Session_Management_Schema.html#gray-box-testing-and-example",
            "https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html"
        ]
    },
    {
        "category": "Session Management",
        "sub_category": "Session Termination",
        "id": "ASVS-3.3.1",
        "description": "Verify that logout and expiration invalidate the session token, such that the back button or a downstream relying party does not resume an authenticated session, including across relying parties.",
        "cwe_ids": [
            613
        ],
        "nist": [
            "7.1"
        ],
        "feature_name": "Terminate session after logout",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": [
            "https://owasp-top-10-proactive-controls-2018.readthedocs.io/en/latest/c6-implement-digital-identity.html",
            "https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/06-Session_Management_Testing/06-Testing_for_Logout_Functionality.html#testing-for-log-out-user-interface",
            "https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html"
        ]
    },
    {
        "category": "Session Management",
        "sub_category": "Session Termination",
        "id": "ASVS-3.3.2",
        "description": "If authenticators permit users to remain logged in, verify that re-authentication occurs periodically both when actively used or after an idle period.",
        "cwe_ids": [
            613
        ],
        "nist": [
            "7.2"
        ],
        "feature_name": "Ensure session timeout (soft/hard)",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": [
            "https://owasp-top-10-proactive-controls-2018.readthedocs.io/en/latest/c6-implement-digital-identity.html",
            "https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/06-Session_Management_Testing/07-Testing_Session_Timeout.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html"
        ]
    },
    {
        "category": "Session Management",
        "sub_category": "Session Termination",
        "id": "ASVS-3.3.3",
        "description": "Verify that the application gives the option to terminate all other active sessions after a successful password change (including change via password reset/recovery), and that this is effective across the application, federated login (if present), and any relying parties.",
        "cwe_ids": [
            613
        ],
        "nist": [],
        "feature_name": "Terminate all sessions when password is changed",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": [
            "https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/06-Session_Management_Testing/06-Testing_for_Logout_Functionality.html#testing-for-log-out-user-interface",
            "https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html"
        ]
    },
    {
        "category": "Session Management",
        "sub_category": "Session Termination",
        "id": "ASVS-3.3.4",
        "description": "Verify that users are able to view and (having re-entered login credentials) log out of any or all currently active sessions and devices.",
        "cwe_ids": [
            613
        ],
        "nist": [
            "7.1"
        ],
        "feature_name": "Enable option to log out from all active session",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": [
            "https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/06-Session_Management_Testing/06-Testing_for_Logout_Functionality.html#testing-for-log-out-user-interface",
            "https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html"
        ]
    },
    {
        "category": "Session Management",
        "sub_category": "Cookie-based Session Management",
        "id": "ASVS-3.4.1",
        "description": "Verify that cookie-based session tokens have the 'Secure' attribute set.",
        "cwe_ids": [
            614
        ],
        "nist": [
            "7.1.1"
        ],
        "feature_name": "Set \"secure\" attribute for cookie-based session tokens",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": [
            "https://owasp-top-10-proactive-controls-2018.readthedocs.io/en/latest/c6-implement-digital-identity.html",
            "https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes.html#httponly-attribute",
            "https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html"
        ]
    },
    {
        "category": "Session Management",
        "sub_category": "Cookie-based Session Management",
        "id": "ASVS-3.4.2",
        "description": "Verify that cookie-based session tokens have the 'HttpOnly' attribute set.",
        "cwe_ids": [
            1004
        ],
        "nist": [
            "7.1.1"
        ],
        "feature_name": "Set httponly attribute for cookie-based session tokens",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [
            "XSS"
        ],
        "references": [
            "https://owasp-top-10-proactive-controls-2018.readthedocs.io/en/latest/c6-implement-digital-identity.html",
            "https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes.html#httponly-attribute",
            "https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html"
        ]
    },
    {
        "category": "Session Management",
        "sub_category": "Cookie-based Session Management",
        "id": "ASVS-3.4.3",
        "description": "Verify that cookie-based session tokens utilize the 'SameSite' attribute to limit exposure to cross-site request forgery attacks.",
        "cwe_ids": [
            1275
        ],
        "nist": [
            "7.1.1"
        ],
        "feature_name": "Set \"samesite\" attribute for cookie-based session tokens",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": [
            "https://owasp-top-10-proactive-controls-2018.readthedocs.io/en/latest/c6-implement-digital-identity.html",
            "https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes.html#httponly-attribute",
            "https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html"
        ]
    },
    {
        "category": "Session Management",
        "sub_category": "Cookie-based Session Management",
        "id": "ASVS-3.4.4",
        "description": "Verify that cookie-based session tokens use the \"__Host-\" prefix so cookies are only sent to the host that initially set the cookie.",
        "cwe_ids": [
            16
        ],
        "nist": [
            "7.1.1"
        ],
        "feature_name": "Set '_Host' prefix for cookie-based session tokens",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": [
            "https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes.html#httponly-attribute",
            "https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html"
        ]
    },
    {
        "category": "Session Management",
        "sub_category": "Cookie-based Session Management",
        "id": "ASVS-3.4.5",
        "description": "Verify that if the application is published under a domain name with other applications that set or use session cookies that might disclose the session cookies, set the path attribute in cookie-based session tokens using the most precise path possible.",
        "cwe_ids": [
            16
        ],
        "nist": [
            "7.1.1"
        ],
        "feature_name": "Set path attribute in cookie-bases session tokens as precise as possible",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": [
            "https://owasp-top-10-proactive-controls-2018.readthedocs.io/en/latest/c6-implement-digital-identity.html",
            "https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes.html#httponly-attribute",
            "https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html"
        ]
    },
    {
        "category": "Session Management",
        "sub_category": "Token-based Session Management",
        "id": "ASVS-3.5.1",
        "description": "Verify the application allows users to revoke OAuth tokens that form trust relationships with linked applications.",
        "cwe_ids": [
            290
        ],
        "nist": [
            "7.1.2"
        ],
        "feature_name": "Allow user revocation of Oauth tokens",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": [
            "https://cheatsheetseries.owasp.org/cheatsheets/JSON_Web_Token_for_Java_Cheat_Sheet.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html"
        ]
    },
    {
        "category": "Session Management",
        "sub_category": "Token-based Session Management",
        "id": "ASVS-3.5.2",
        "description": "Verify the application uses session tokens rather than static API secrets and keys, except with legacy implementations.",
        "cwe_ids": [
            798
        ],
        "nist": [],
        "feature_name": "Use ephemeral secrets rather than static secrets",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": [
            "https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/06-Session_Management_Testing/01-Testing_for_Session_Management_Schema.html#gray-box-testing-and-example",
            "https://cheatsheetseries.owasp.org/cheatsheets/JSON_Web_Token_for_Java_Cheat_Sheet.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html"
        ]
    },
    {
        "category": "Session Management",
        "sub_category": "Token-based Session Management",
        "id": "ASVS-3.5.3",
        "description": "Verify that stateless session tokens use digital signatures, encryption, and other countermeasures to protect against tampering, enveloping, replay, null cipher, and key substitution attacks.",
        "cwe_ids": [
            345
        ],
        "nist": [],
        "feature_name": "Using stateless tokens, ensure cryptographically secure characteristics",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": [
            "https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/JSON_Web_Token_for_Java_Cheat_Sheet.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html"
        ]
    },
    {
        "category": "Session Management",
        "sub_category": "Federated Re-authentication",
        "id": "ASVS-3.6.1",
        "description": "Verify that Relying Parties (RPs) specify the maximum authentication time to Credential Service Providers (CSPs) and that CSPs re-authenticate the user if they haven't used a session within that period.",
        "cwe_ids": [
            613
        ],
        "nist": [
            "7.2.1"
        ],
        "feature_name": "Enforce authentication time-out when dealing with an authentication third party (CSP)",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": [
            "https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/06-Session_Management_Testing/01-Testing_for_Session_Management_Schema.html#gray-box-testing-and-example"
        ]
    },
    {
        "category": "Session Management",
        "sub_category": "Federated Re-authentication",
        "id": "ASVS-3.6.2",
        "description": "Verify that Credential Service Providers (CSPs) inform Relying Parties (RPs) of the last authentication event, to allow RPs to determine if they need to re-authenticate the user.",
        "cwe_ids": [
            613
        ],
        "nist": [
            "7.2.1"
        ],
        "feature_name": "When using an authentication third party (CSP), relay last authentication event to other parties in the chain",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": []
    },
    {
        "category": "Session Management",
        "sub_category": "Defenses Against Session Management Exploits",
        "id": "ASVS-3.7.1",
        "description": "Verify the application ensures a full, valid login session or requires re-authentication or secondary verification before allowing any sensitive transactions or account modifications.",
        "cwe_ids": [
            306
        ],
        "nist": [],
        "feature_name": "Re-authenticate before sensitive transactions",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": [
            "https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/06-Session_Management_Testing/01-Testing_for_Session_Management_Schema.html#gray-box-testing-and-example",
            "https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Transaction_Authorization_Cheat_Sheet.html"
        ]
    },
    {
        "category": "Authentication",
        "sub_category": "Password Security",
        "id": "ASVS-2.1.1",
        "description": "Verify that user set passwords are at least 12 characters in length (after multiple spaces are combined).",
        "cwe_ids": [
            521
        ],
        "nist": [
            "5.1.1.2"
        ],
        "feature_name": "User passwords are of sufficient minimum length",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": [
            "https://owasp-top-10-proactive-controls-2018.readthedocs.io/en/latest/c6-implement-digital-identity.html",
            "https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/04-Authentication_Testing/07-Testing_for_Weak_Password_Policy.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Choosing_and_Using_Security_Questions_Cheat_Sheet.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Forgot_Password_Cheat_Sheet.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Credential_Stuffing_Prevention_Cheat_Sheet.html"
        ]
    },
    {
        "category": "Authentication",
        "sub_category": "Password Security",
        "id": "ASVS-2.1.2",
        "description": "Verify that passwords of at least 64 characters are permitted, and that passwords of more than 128 characters are denied.",
        "cwe_ids": [
            521
        ],
        "nist": [
            "5.1.1.2"
        ],
        "feature_name": "Allow long passwords",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": [
            "https://owasp-top-10-proactive-controls-2018.readthedocs.io/en/latest/c6-implement-digital-identity.html",
            "https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/04-Authentication_Testing/07-Testing_for_Weak_Password_Policy.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Choosing_and_Using_Security_Questions_Cheat_Sheet.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Forgot_Password_Cheat_Sheet.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Credential_Stuffing_Prevention_Cheat_Sheet.html"
        ]
    },
    {
        "category": "Authentication",
        "sub_category": "Password Security",
        "id": "ASVS-2.1.3",
        "description": "Verify that password truncation is not performed. However, consecutive multiple spaces may be replaced by a single space.",
        "cwe_ids": [
            521
        ],
        "nist": [
            "5.1.1.2"
        ],
        "feature_name": "Avoid password truncation, with exception of consecutive spaces",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": [
            "https://owasp-top-10-proactive-controls-2018.readthedocs.io/en/latest/c6-implement-digital-identity.html",
            "https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/04-Authentication_Testing/07-Testing_for_Weak_Password_Policy.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Choosing_and_Using_Security_Questions_Cheat_Sheet.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Forgot_Password_Cheat_Sheet.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Credential_Stuffing_Prevention_Cheat_Sheet.html"
        ]
    },
    {
        "category": "Authentication",
        "sub_category": "Password Security",
        "id": "ASVS-2.1.4",
        "description": "Verify that any printable Unicode character, including language neutral characters such as spaces and Emojis are permitted in passwords.",
        "cwe_ids": [
            521
        ],
        "nist": [
            "5.1.1.2"
        ],
        "feature_name": "Allow unicode in passwords",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": [
            "https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/04-Authentication_Testing/07-Testing_for_Weak_Password_Policy.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Choosing_and_Using_Security_Questions_Cheat_Sheet.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Forgot_Password_Cheat_Sheet.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Credential_Stuffing_Prevention_Cheat_Sheet.html"
        ]
    },
    {
        "category": "Authentication",
        "sub_category": "Password Security",
        "id": "ASVS-2.1.5",
        "description": "Verify users can change their password.",
        "cwe_ids": [
            620
        ],
        "nist": [
            "5.1.1.2"
        ],
        "feature_name": "Offer password changing functionality",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": [
            "https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/04-Authentication_Testing/07-Testing_for_Weak_Password_Policy.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Choosing_and_Using_Security_Questions_Cheat_Sheet.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Forgot_Password_Cheat_Sheet.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Credential_Stuffing_Prevention_Cheat_Sheet.html"
        ]
    },
    {
        "category": "Authentication",
        "sub_category": "Password Security",
        "id": "ASVS-2.1.6",
        "description": "Verify that password change functionality requires the user's current and new password.",
        "cwe_ids": [
            620
        ],
        "nist": [
            "5.1.1.2"
        ],
        "feature_name": "Change password with presence of old and new password",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": [
            "https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/04-Authentication_Testing/07-Testing_for_Weak_Password_Policy.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Choosing_and_Using_Security_Questions_Cheat_Sheet.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Forgot_Password_Cheat_Sheet.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Credential_Stuffing_Prevention_Cheat_Sheet.html"
        ]
    },
    {
        "category": "Authentication",
        "sub_category": "Password Security",
        "id": "ASVS-2.1.7",
        "description": "Verify that passwords submitted during account registration, login, and password change are checked against a set of breached passwords either locally (such as the top 1,000 or 10,000 most common passwords which match the system's password policy) or using an external API. If using an API a zero knowledge proof or other mechanism should be used to ensure that the plain text password is not sent or used in verifying the breach status of the password. If the password is breached, the application must require the user to set a new non-breached password.",
        "cwe_ids": [
            521
        ],
        "nist": [
            "5.1.1.2"
        ],
        "feature_name": "Check new passwords against breached passwords",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": [
            "https://owasp-top-10-proactive-controls-2018.readthedocs.io/en/latest/c6-implement-digital-identity.html",
            "https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/04-Authentication_Testing/07-Testing_for_Weak_Password_Policy.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Choosing_and_Using_Security_Questions_Cheat_Sheet.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Forgot_Password_Cheat_Sheet.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Credential_Stuffing_Prevention_Cheat_Sheet.html"
        ]
    },
    {
        "category": "Authentication",
        "sub_category": "Password Security",
        "id": "ASVS-2.1.8",
        "description": "Verify that a password strength meter is provided to help users set a stronger password.",
        "cwe_ids": [
            521
        ],
        "nist": [
            "5.1.1.2"
        ],
        "feature_name": "Provide a password strength meter",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": [
            "https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/04-Authentication_Testing/07-Testing_for_Weak_Password_Policy.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Choosing_and_Using_Security_Questions_Cheat_Sheet.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Forgot_Password_Cheat_Sheet.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Credential_Stuffing_Prevention_Cheat_Sheet.html"
        ]
    },
    {
        "category": "Authentication",
        "sub_category": "Password Security",
        "id": "ASVS-2.1.9",
        "description": "Verify that there are no password composition rules limiting the type of characters permitted. There should be no requirement for upper or lower case or numbers or special characters.",
        "cwe_ids": [
            521
        ],
        "nist": [
            "5.1.1.2"
        ],
        "feature_name": "Do not limit character types for password composition",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": [
            "https://owasp-top-10-proactive-controls-2018.readthedocs.io/en/latest/c6-implement-digital-identity.html",
            "https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/04-Authentication_Testing/07-Testing_for_Weak_Password_Policy.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Choosing_and_Using_Security_Questions_Cheat_Sheet.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Forgot_Password_Cheat_Sheet.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Credential_Stuffing_Prevention_Cheat_Sheet.html"
        ]
    },
    {
        "category": "Authentication",
        "sub_category": "Password Security",
        "id": "ASVS-2.1.10",
        "description": "Verify that there are no periodic credential rotation or password history requirements.",
        "cwe_ids": [
            263
        ],
        "nist": [
            "5.1.1.2"
        ],
        "feature_name": "Do not enforce password rotation rules or history requirements",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": [
            "https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/04-Authentication_Testing/07-Testing_for_Weak_Password_Policy.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Choosing_and_Using_Security_Questions_Cheat_Sheet.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Forgot_Password_Cheat_Sheet.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Credential_Stuffing_Prevention_Cheat_Sheet.html"
        ]
    },
    {
        "category": "Authentication",
        "sub_category": "Password Security",
        "id": "ASVS-2.1.11",
        "description": "Verify that \"paste\" functionality, browser password helpers, and external password managers are permitted.",
        "cwe_ids": [
            521
        ],
        "nist": [
            "5.1.1.2"
        ],
        "feature_name": "Allow password helpers, including paste functionality",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": [
            "https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/04-Authentication_Testing/07-Testing_for_Weak_Password_Policy.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Choosing_and_Using_Security_Questions_Cheat_Sheet.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Forgot_Password_Cheat_Sheet.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Credential_Stuffing_Prevention_Cheat_Sheet.html"
        ]
    },
    {
        "category": "Authentication",
        "sub_category": "Password Security",
        "id": "ASVS-2.1.12",
        "description": "Verify that the user can choose to either temporarily view the entire masked password, or temporarily view the last typed character of the password on platforms that do not have this as built-in functionality.",
        "cwe_ids": [
            521
        ],
        "nist": [
            "5.1.1.2"
        ],
        "feature_name": "Provide options to view entire password or last typed character",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": [
            "https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/04-Authentication_Testing/07-Testing_for_Weak_Password_Policy.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Choosing_and_Using_Security_Questions_Cheat_Sheet.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Forgot_Password_Cheat_Sheet.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Credential_Stuffing_Prevention_Cheat_Sheet.html"
        ]
    },
    {
        "category": "Authentication",
        "sub_category": "General Authenticator Security",
        "id": "ASVS-2.2.1",
        "description": "Verify that anti-automation controls are effective at mitigating breached credential testing, brute force, and account lockout attacks. Such controls include blocking the most common breached passwords, soft lockouts, rate limiting, CAPTCHA, ever increasing delays between attempts, IP address restrictions, or risk-based restrictions such as location, first login on a device, recent attempts to unlock the account, or similar. Verify that no more than 100 failed attempts per hour is possible on a single account.",
        "cwe_ids": [
            307
        ],
        "nist": [
            "5.2.2",
            "5.1.1.2",
            "5.1.4.2",
            "5.1.5.2"
        ],
        "feature_name": "Restrict excessive authentication",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": [
            "https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/04-Authentication_Testing/03-Testing_for_Weak_Lock_Out_Mechanism.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Authentication_Cheat_Sheet.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Transport_Layer_Protection_Cheat_Sheet.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/TLS_Cipher_String_Cheat_Sheet.html"
        ]
    },
    {
        "category": "Authentication",
        "sub_category": "General Authenticator Security",
        "id": "ASVS-2.2.2",
        "description": "Verify that the use of weak authenticators (such as SMS and email) is limited to secondary verification and transaction approval and not as a replacement for more secure authentication methods. Verify that stronger methods are offered before weak methods, users are aware of the risks, or that proper measures are in place to limit the risks of account compromise.",
        "cwe_ids": [
            304
        ],
        "nist": [
            "5.2.10"
        ],
        "feature_name": "Use strong authenticators with priority and weak authenticators only for less secure access",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": [
            "https://cheatsheetseries.owasp.org/cheatsheets/Authentication_Cheat_Sheet.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Transport_Layer_Protection_Cheat_Sheet.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/TLS_Cipher_String_Cheat_Sheet.html"
        ]
    },
    {
        "category": "Authentication",
        "sub_category": "General Authenticator Security",
        "id": "ASVS-2.2.3",
        "description": "Verify that secure notifications are sent to users after updates to authentication details, such as credential resets, email or address changes, logging in from unknown or risky locations. The use of push notifications - rather than SMS or email - is preferred, but in the absence of push notifications, SMS or email is acceptable as long as no sensitive information is disclosed in the notification.",
        "cwe_ids": [
            620
        ],
        "nist": [],
        "feature_name": "Notify users about anomalies in their usage patterns",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": [
            "https://cheatsheetseries.owasp.org/cheatsheets/Authentication_Cheat_Sheet.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Transport_Layer_Protection_Cheat_Sheet.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/TLS_Cipher_String_Cheat_Sheet.html"
        ]
    },
    {
        "category": "Authentication",
        "sub_category": "General Authenticator Security",
        "id": "ASVS-2.2.4",
        "description": "Verify impersonation resistance against phishing, such as the use of multi-factor authentication, cryptographic devices with intent (such as connected keys with a push to authenticate), or at higher AAL levels, client-side certificates.",
        "cwe_ids": [
            308
        ],
        "nist": [
            "5.2.5"
        ],
        "feature_name": "Resist stolen credentials",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [
            "Cryptography"
        ],
        "references": [
            "https://cheatsheetseries.owasp.org/cheatsheets/Authentication_Cheat_Sheet.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Transport_Layer_Protection_Cheat_Sheet.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/TLS_Cipher_String_Cheat_Sheet.html"
        ]
    },
    {
        "category": "Authentication",
        "sub_category": "General Authenticator Security",
        "id": "ASVS-2.2.5",
        "description": "Verify that where a Credential Service Provider (CSP) and the application verifying authentication are separated, mutually authenticated TLS is in place between the two endpoints.",
        "cwe_ids": [
            319
        ],
        "nist": [
            "5.2.6"
        ],
        "feature_name": "Mutually authenticate application and credential service provider",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": [
            "https://cheatsheetseries.owasp.org/cheatsheets/Authentication_Cheat_Sheet.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Transport_Layer_Protection_Cheat_Sheet.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/TLS_Cipher_String_Cheat_Sheet.html"
        ]
    },
    {
        "category": "Authentication",
        "sub_category": "General Authenticator Security",
        "id": "ASVS-2.2.6",
        "description": "Verify replay resistance through the mandated use of One-time Passwords (OTP) devices, cryptographic authenticators, or lookup codes.",
        "cwe_ids": [
            308
        ],
        "nist": [
            "5.2.8"
        ],
        "feature_name": "Mandate using multi factor authentication",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": [
            "https://cheatsheetseries.owasp.org/cheatsheets/Authentication_Cheat_Sheet.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Transport_Layer_Protection_Cheat_Sheet.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/TLS_Cipher_String_Cheat_Sheet.html"
        ]
    },
    {
        "category": "Authentication",
        "sub_category": "General Authenticator Security",
        "id": "ASVS-2.2.7",
        "description": "Verify intent to authenticate by requiring the entry of an OTP token or user-initiated action such as a button press on a FIDO hardware key.",
        "cwe_ids": [
            308
        ],
        "nist": [
            "5.2.9"
        ],
        "feature_name": "Authenticate by OTP token entry or user-initiated action on multi factor device",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": [
            "https://cheatsheetseries.owasp.org/cheatsheets/Authentication_Cheat_Sheet.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Transport_Layer_Protection_Cheat_Sheet.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/TLS_Cipher_String_Cheat_Sheet.html"
        ]
    },
    {
        "category": "Authentication",
        "sub_category": "Authenticator Lifecycle",
        "id": "ASVS-2.3.1",
        "description": "Verify system generated initial passwords or activation codes SHOULD be securely randomly generated, SHOULD be at least 6 characters long, and MAY contain letters and numbers, and expire after a short period of time. These initial secrets must not be permitted to become the long term password.",
        "cwe_ids": [
            330
        ],
        "nist": [
            "5.1.1.2",
            "A.3"
        ],
        "feature_name": "Generate initial passwords with sufficient secure random, short expiration time and do not allow to reuse the initial password.",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": []
    },
    {
        "category": "Authentication",
        "sub_category": "Authenticator Lifecycle",
        "id": "ASVS-2.3.2",
        "description": "Verify that enrollment and use of user-provided authentication devices are supported, such as a U2F or FIDO tokens.",
        "cwe_ids": [
            308
        ],
        "nist": [
            "6.1.3"
        ],
        "feature_name": "Support subscriber-provided authentication devices",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": []
    },
    {
        "category": "Authentication",
        "sub_category": "Authenticator Lifecycle",
        "id": "ASVS-2.3.3",
        "description": "Verify that renewal instructions are sent with sufficient time to renew time bound authenticators.",
        "cwe_ids": [
            287
        ],
        "nist": [
            "6.1.4"
        ],
        "feature_name": "Inform users for authentication renewal",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": []
    },
    {
        "category": "Authentication",
        "sub_category": "Credential Storage",
        "id": "ASVS-2.4.1",
        "description": "Verify that passwords are stored in a form that is resistant to offline attacks. Passwords SHALL be salted and hashed using an approved one-way key derivation or password hashing function. Key derivation and password hashing functions take a password, a salt, and a cost factor as inputs when generating a password hash.",
        "cwe_ids": [
            916
        ],
        "nist": [
            "5.1.1.2"
        ],
        "feature_name": "Store passwords salted and hashed",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": [
            "https://owasp-top-10-proactive-controls-2018.readthedocs.io/en/latest/c6-implement-digital-identity.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Password_Storage_Cheat_Sheet.html"
        ]
    },
    {
        "category": "Authentication",
        "sub_category": "Credential Storage",
        "id": "ASVS-2.4.2",
        "description": "Verify that the salt is at least 32 bits in length and be chosen arbitrarily to minimize salt value collisions among stored hashes. For each credential, a unique salt value and the resulting hash SHALL be stored.",
        "cwe_ids": [
            916
        ],
        "nist": [
            "5.1.1.2"
        ],
        "feature_name": "Use unique random salt with sufficient entropy for each credential",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": [
            "https://owasp-top-10-proactive-controls-2018.readthedocs.io/en/latest/c6-implement-digital-identity.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Password_Storage_Cheat_Sheet.html"
        ]
    },
    {
        "category": "Authentication",
        "sub_category": "Credential Storage",
        "id": "ASVS-2.4.3",
        "description": "Verify that if PBKDF2 is used, the iteration count SHOULD be as large as verification server performance will allow, typically at least 100,000 iterations.",
        "cwe_ids": [
            916
        ],
        "nist": [
            "5.1.1.2"
        ],
        "feature_name": "Set the highest feasible iteration count for PBKDF2",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": [
            "https://owasp-top-10-proactive-controls-2018.readthedocs.io/en/latest/c6-implement-digital-identity.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Password_Storage_Cheat_Sheet.html"
        ]
    },
    {
        "category": "Authentication",
        "sub_category": "Credential Storage",
        "id": "ASVS-2.4.4",
        "description": "Verify that if bcrypt is used, the work factor SHOULD be as large as verification server performance will allow, with a minimum of 10.",
        "cwe_ids": [
            916
        ],
        "nist": [
            "5.1.1.2"
        ],
        "feature_name": "Set the highest feasible work factor for bcrypt",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": [
            "https://owasp-top-10-proactive-controls-2018.readthedocs.io/en/latest/c6-implement-digital-identity.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Password_Storage_Cheat_Sheet.html"
        ]
    },
    {
        "category": "Authentication",
        "sub_category": "Credential Storage",
        "id": "ASVS-2.4.5",
        "description": "Verify that an additional iteration of a key derivation function is performed, using a salt value that is secret and known only to the verifier. Generate the salt value using an approved random bit generator [SP 800-90Ar1] and provide at least the minimum security strength specified in the latest revision of SP 800-131A. The secret salt value SHALL be stored separately from the hashed passwords (e.g., in a specialized device like a hardware security module).",
        "cwe_ids": [
            916
        ],
        "nist": [
            "5.1.1.2"
        ],
        "feature_name": "Use separately stored secret salt (pepper)",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": [
            "https://cheatsheetseries.owasp.org/cheatsheets/Password_Storage_Cheat_Sheet.html"
        ]
    },
    {
        "category": "Authentication",
        "sub_category": "Credential Recovery",
        "id": "ASVS-2.5.1",
        "description": "Verify that a system generated initial activation or recovery secret is not sent in clear text to the user.",
        "cwe_ids": [
            640
        ],
        "nist": [
            "5.1.1.2"
        ],
        "feature_name": "Send authentication secrets encrypted",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": [
            "https://owasp-top-10-proactive-controls-2018.readthedocs.io/en/latest/c6-implement-digital-identity.html",
            "https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/04-Authentication_Testing/01-Testing_for_Credentials_Transported_over_an_Encrypted_Channel.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Choosing_and_Using_Security_Questions_Cheat_Sheet.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Forgot_Password_Cheat_Sheet.html"
        ]
    },
    {
        "category": "Authentication",
        "sub_category": "Credential Recovery",
        "id": "ASVS-2.5.2",
        "description": "Verify password hints or knowledge-based authentication (so-called \"secret questions\") are not present.",
        "cwe_ids": [
            640
        ],
        "nist": [
            "5.1.1.2"
        ],
        "feature_name": "Do not use password hints or secret questions",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": [
            "https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/04-Authentication_Testing/08-Testing_for_Weak_Security_Question_Answer.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Choosing_and_Using_Security_Questions_Cheat_Sheet.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Forgot_Password_Cheat_Sheet.html"
        ]
    },
    {
        "category": "Authentication",
        "sub_category": "Credential Recovery",
        "id": "ASVS-2.5.3",
        "description": "Verify password credential recovery does not reveal the current password in any way.",
        "cwe_ids": [
            640
        ],
        "nist": [
            "5.1.1.2"
        ],
        "feature_name": "Do not reveal the current password during password recovery",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": [
            "https://owasp-top-10-proactive-controls-2018.readthedocs.io/en/latest/c6-implement-digital-identity.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Choosing_and_Using_Security_Questions_Cheat_Sheet.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Forgot_Password_Cheat_Sheet.html"
        ]
    },
    {
        "category": "Authentication",
        "sub_category": "Credential Recovery",
        "id": "ASVS-2.5.4",
        "description": "Verify shared or default accounts are not present (e.g. \"root\", \"admin\", or \"sa\").",
        "cwe_ids": [
            16
        ],
        "nist": [
            "5.1.1.2",
            "A.3"
        ],
        "feature_name": "Disallow shared high privileged accounts",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": [
            "https://cheatsheetseries.owasp.org/cheatsheets/Choosing_and_Using_Security_Questions_Cheat_Sheet.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Forgot_Password_Cheat_Sheet.html"
        ]
    },
    {
        "category": "Authentication",
        "sub_category": "Credential Recovery",
        "id": "ASVS-2.5.5",
        "description": "Verify that if an authentication factor is changed or replaced, that the user is notified of this event.",
        "cwe_ids": [
            304
        ],
        "nist": [
            "6.1.2.3"
        ],
        "feature_name": "Notify user about credential change",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": [
            "https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/04-Authentication_Testing/02-Testing_for_Default_Credentials.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Choosing_and_Using_Security_Questions_Cheat_Sheet.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Forgot_Password_Cheat_Sheet.html"
        ]
    },
    {
        "category": "Authentication",
        "sub_category": "Credential Recovery",
        "id": "ASVS-2.5.6",
        "description": "Verify forgotten password, and other recovery paths use a secure recovery mechanism, such as time-based OTP (TOTP) or other soft token, mobile push, or another offline recovery mechanism.",
        "cwe_ids": [
            640
        ],
        "nist": [
            "5.1.1.2"
        ],
        "feature_name": "Use secure recovery mechanisms for forgotten passwords",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": [
            "https://owasp-top-10-proactive-controls-2018.readthedocs.io/en/latest/c6-implement-digital-identity.html",
            "https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/04-Authentication_Testing/09-Testing_for_Weak_Password_Change_or_Reset_Functionalities.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Choosing_and_Using_Security_Questions_Cheat_Sheet.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Forgot_Password_Cheat_Sheet.html"
        ]
    },
    {
        "category": "Authentication",
        "sub_category": "Credential Recovery",
        "id": "ASVS-2.5.7",
        "description": "Verify that if OTP or multi-factor authentication factors are lost, that evidence of identity proofing is performed at the same level as during enrollment.",
        "cwe_ids": [
            308
        ],
        "nist": [
            "6.1.2.3"
        ],
        "feature_name": "Require proof of identity of the same level as during enrollment when recovering OTP or MFA",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": [
            "https://cheatsheetseries.owasp.org/cheatsheets/Choosing_and_Using_Security_Questions_Cheat_Sheet.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Forgot_Password_Cheat_Sheet.html"
        ]
    },
    {
        "category": "Authentication",
        "sub_category": "Look-up Secret Verifier",
        "id": "ASVS-2.6.1",
        "description": "Verify that lookup secrets can be used only once.",
        "cwe_ids": [
            308
        ],
        "nist": [
            "5.1.2.2"
        ],
        "feature_name": "Use lookup secrets only once",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": []
    },
    {
        "category": "Authentication",
        "sub_category": "Look-up Secret Verifier",
        "id": "ASVS-2.6.2",
        "description": "Verify that lookup secrets have sufficient randomness (112 bits of entropy), or if less than 112 bits of entropy, salted with a unique and random 32-bit salt and hashed with an approved one-way hash.",
        "cwe_ids": [
            330
        ],
        "nist": [
            "5.1.2.2"
        ],
        "feature_name": "Generate lookup secrets with sufficient entropy",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": []
    },
    {
        "category": "Authentication",
        "sub_category": "Look-up Secret Verifier",
        "id": "ASVS-2.6.3",
        "description": "Verify that lookup secrets are resistant to offline attacks, such as predictable values.",
        "cwe_ids": [
            310
        ],
        "nist": [
            "5.1.2.2"
        ],
        "feature_name": "Use unpredictable lookup secrets",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": []
    },
    {
        "category": "Authentication",
        "sub_category": "Out of Band Verifier",
        "id": "ASVS-2.7.1",
        "description": "Verify that clear text out of band (NIST \"restricted\") authenticators, such as SMS or PSTN, are not offered by default, and stronger alternatives such as push notifications are offered first.",
        "cwe_ids": [
            287
        ],
        "nist": [
            "5.1.3.2"
        ],
        "feature_name": "Do not offer weak (clear text) authenticators by default",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": [
            "https://cheatsheetseries.owasp.org/cheatsheets/Forgot_Password_Cheat_Sheet.html"
        ]
    },
    {
        "category": "Authentication",
        "sub_category": "Out of Band Verifier",
        "id": "ASVS-2.7.2",
        "description": "Verify that the out of band verifier expires out of band authentication requests, codes, or tokens after 10 minutes.",
        "cwe_ids": [
            287
        ],
        "nist": [
            "5.1.3.2"
        ],
        "feature_name": "Ensure timely expiration of out of band authentication request, code, or tokens",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": [
            "https://cheatsheetseries.owasp.org/cheatsheets/Forgot_Password_Cheat_Sheet.html"
        ]
    },
    {
        "category": "Authentication",
        "sub_category": "Out of Band Verifier",
        "id": "ASVS-2.7.3",
        "description": "Verify that the out of band verifier authentication requests, codes, or tokens are only usable once, and only for the original authentication request.",
        "cwe_ids": [
            287
        ],
        "nist": [
            "5.1.3.2"
        ],
        "feature_name": "Use out of band authentication requests, codes or tokens only once",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": [
            "https://cheatsheetseries.owasp.org/cheatsheets/Forgot_Password_Cheat_Sheet.html"
        ]
    },
    {
        "category": "Authentication",
        "sub_category": "Out of Band Verifier",
        "id": "ASVS-2.7.4",
        "description": "Verify that the out of band authenticator and verifier communicates over a secure independent channel.",
        "cwe_ids": [
            523
        ],
        "nist": [
            "5.1.3.2"
        ],
        "feature_name": "Communicate out of band authentication requests, codes or tokens independently and securely",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": [
            "https://cheatsheetseries.owasp.org/cheatsheets/Forgot_Password_Cheat_Sheet.html"
        ]
    },
    {
        "category": "Authentication",
        "sub_category": "Out of Band Verifier",
        "id": "ASVS-2.7.5",
        "description": "Verify that the out of band verifier retains only a hashed version of the authentication code.",
        "cwe_ids": [
            256
        ],
        "nist": [
            "5.1.3.2"
        ],
        "feature_name": "Only store hashed authentication codes",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": [
            "https://cheatsheetseries.owasp.org/cheatsheets/Forgot_Password_Cheat_Sheet.html"
        ]
    },
    {
        "category": "Authentication",
        "sub_category": "Out of Band Verifier",
        "id": "ASVS-2.7.6",
        "description": "Verify that the initial authentication code is generated by a secure random number generator, containing at least 20 bits of entropy (typically a six digital random number is sufficient).",
        "cwe_ids": [
            310
        ],
        "nist": [
            "5.1.3.2"
        ],
        "feature_name": "Use secure random to generate initial authentication codes",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [
            "Cryptography"
        ],
        "references": [
            "https://cheatsheetseries.owasp.org/cheatsheets/Forgot_Password_Cheat_Sheet.html"
        ]
    },
    {
        "category": "Authentication",
        "sub_category": "One Time Verifier",
        "id": "ASVS-2.8.1",
        "description": "Verify that time-based OTPs have a defined lifetime before expiring.",
        "cwe_ids": [
            613
        ],
        "nist": [
            "5.1.4.2",
            "5.1.5.2"
        ],
        "feature_name": "Defined lifetime of time-based one-time password",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": []
    },
    {
        "category": "Authentication",
        "sub_category": "One Time Verifier",
        "id": "ASVS-2.8.2",
        "description": "Verify that symmetric keys used to verify submitted OTPs are highly protected, such as by using a hardware security module or secure operating system based key storage.",
        "cwe_ids": [
            320
        ],
        "nist": [
            "5.1.4.2",
            "5.1.5.2"
        ],
        "feature_name": "Use security module to store one-time password verification keys",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [
            "Cryptography"
        ],
        "references": []
    },
    {
        "category": "Authentication",
        "sub_category": "One Time Verifier",
        "id": "ASVS-2.8.3",
        "description": "Verify that approved cryptographic algorithms are used in the generation, seeding, and verification of OTPs.",
        "cwe_ids": [
            326
        ],
        "nist": [
            "5.1.4.2",
            "5.1.5.2"
        ],
        "feature_name": "Use approved cryptographic algorithms in generation, seeding and verification of OTPs",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": []
    },
    {
        "category": "Authentication",
        "sub_category": "One Time Verifier",
        "id": "ASVS-2.8.4",
        "description": "Verify that time-based OTP can be used only once within the validity period.",
        "cwe_ids": [
            287
        ],
        "nist": [
            "5.1.4.2",
            "5.1.5.2"
        ],
        "feature_name": "Use time-based OTP only once",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": []
    },
    {
        "category": "Authentication",
        "sub_category": "One Time Verifier",
        "id": "ASVS-2.8.5",
        "description": "Verify that if a time-based multi-factor OTP token is re-used during the validity period, it is logged and rejected with secure notifications being sent to the holder of the device.",
        "cwe_ids": [
            287
        ],
        "nist": [
            "5.1.5.2"
        ],
        "feature_name": "Log and reject re-use of valid time-based OTP tokens and notify device holder.",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": []
    },
    {
        "category": "Authentication",
        "sub_category": "One Time Verifier",
        "id": "ASVS-2.8.6",
        "description": "Verify physical single-factor OTP generator can be revoked in case of theft or other loss. Ensure that revocation is immediately effective across logged in sessions, regardless of location.",
        "cwe_ids": [
            613
        ],
        "nist": [
            "5.2.1"
        ],
        "feature_name": "Ensure that physical single factor OTP generator can be revoked fully immediately when lost",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": []
    },
    {
        "category": "Authentication",
        "sub_category": "One Time Verifier",
        "id": "ASVS-2.8.7",
        "description": "Verify that biometric authenticators are limited to use only as secondary factors in conjunction with either something you have and something you know.",
        "cwe_ids": [
            308
        ],
        "nist": [
            "5.2.3"
        ],
        "feature_name": "Biometric authenticators only as secondary factors",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": []
    },
    {
        "category": "Authentication",
        "sub_category": "Cryptographic Verifier",
        "id": "ASVS-2.9.1",
        "description": "Verify that cryptographic keys used in verification are stored securely and protected against disclosure, such as using a Trusted Platform Module (TPM) or Hardware Security Module (HSM), or an OS service that can use this secure storage.",
        "cwe_ids": [
            320
        ],
        "nist": [
            "5.1.7.2"
        ],
        "feature_name": "Store cryptographic keys securely",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": [
            "https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Key_Management_Cheat_Sheet.html"
        ]
    },
    {
        "category": "Authentication",
        "sub_category": "Cryptographic Verifier",
        "id": "ASVS-2.9.2",
        "description": "Verify that the challenge nonce is at least 64 bits in length, and statistically unique or unique over the lifetime of the cryptographic device.",
        "cwe_ids": [
            330
        ],
        "nist": [
            "5.1.7.2"
        ],
        "feature_name": "Use a unique challenge nonce of sufficient size",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [
            "Cryptography"
        ],
        "references": [
            "https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Key_Management_Cheat_Sheet.html"
        ]
    },
    {
        "category": "Authentication",
        "sub_category": "Cryptographic Verifier",
        "id": "ASVS-2.9.3",
        "description": "Verify that approved cryptographic algorithms are used in the generation, seeding, and verification.",
        "cwe_ids": [
            327
        ],
        "nist": [
            "5.1.7.2"
        ],
        "feature_name": "Use approved cryptographic algorithms for generation, seeding and verification",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [
            "Cryptography"
        ],
        "references": [
            "https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Key_Management_Cheat_Sheet.html"
        ]
    },
    {
        "category": "Authentication",
        "sub_category": "Service Authentication",
        "id": "ASVS-2.10.1",
        "description": "Verify that intra-service secrets do not rely on unchanging credentials such as passwords, API keys or shared accounts with privileged access.",
        "cwe_ids": [
            287
        ],
        "nist": [
            "5.1.1.1"
        ],
        "feature_name": "Do not use static secrets",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": []
    },
    {
        "category": "Authentication",
        "sub_category": "Service Authentication",
        "id": "ASVS-2.10.2",
        "description": "Verify that if passwords are required for service authentication, the service account used is not a default credential. (e.g. root/root or admin/admin are default in some services during installation).",
        "cwe_ids": [
            255
        ],
        "nist": [
            "5.1.1.1"
        ],
        "feature_name": "Disallow default credentials",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": []
    },
    {
        "category": "Authentication",
        "sub_category": "Service Authentication",
        "id": "ASVS-2.10.3",
        "description": "Verify that passwords are stored with sufficient protection to prevent offline recovery attacks, including local system access.",
        "cwe_ids": [
            522
        ],
        "nist": [
            "5.1.1.1"
        ],
        "feature_name": "Store credentials securely",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": []
    },
    {
        "category": "Authentication",
        "sub_category": "Service Authentication",
        "id": "ASVS-2.10.4",
        "description": "Verify passwords, integrations with databases and third-party systems, seeds and internal secrets, and API keys are managed securely and not included in the source code or stored within source code repositories. Such storage SHOULD resist offline attacks. The use of a secure software key store (L1), hardware TPM, or an HSM (L3) is recommended for password storage.",
        "cwe_ids": [
            798
        ],
        "nist": [],
        "feature_name": "Do not store secrets in the code",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": []
    },
    {
        "category": "Communication",
        "sub_category": "Client Communication Security",
        "id": "ASVS-9.1.1",
        "description": "Verify that TLS is used for all client connectivity, and does not fall back to insecure or unencrypted communications.",
        "cwe_ids": [
            319
        ],
        "nist": [],
        "feature_name": "Do not fall back to insecure protocols in TCP",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": [
            "https://owasp-top-10-proactive-controls-2018.readthedocs.io/en/latest/c8-protect-data-everywhere.html",
            "https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/01-Testing_for_Weak_SSL_TLS_Ciphers_Insufficient_Transport_Layer_Protection.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Transport_Layer_Protection_Cheat_Sheet.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/TLS_Cipher_String_Cheat_Sheet.html"
        ]
    },
    {
        "category": "Communication",
        "sub_category": "Client Communication Security",
        "id": "ASVS-9.1.2",
        "description": "Verify using up to date TLS testing tools that only strong cipher suites are enabled, with the strongest cipher suites set as preferred.",
        "cwe_ids": [
            326
        ],
        "nist": [],
        "feature_name": "Verify strong TLS algorithms by testing",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": [
            "https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/01-Testing_for_Weak_SSL_TLS_Ciphers_Insufficient_Transport_Layer_Protection.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Transport_Layer_Protection_Cheat_Sheet.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/TLS_Cipher_String_Cheat_Sheet.html"
        ]
    },
    {
        "category": "Communication",
        "sub_category": "Client Communication Security",
        "id": "ASVS-9.1.3",
        "description": "Verify that only the latest recommended versions of the TLS protocol are enabled, such as TLS 1.2 and TLS 1.3. The latest version of the TLS protocol should be the preferred option.",
        "cwe_ids": [
            326
        ],
        "nist": [],
        "feature_name": "Disable insecure SSL/TLS versions",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": [
            "https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/01-Testing_for_Weak_SSL_TLS_Ciphers_Insufficient_Transport_Layer_Protection.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Transport_Layer_Protection_Cheat_Sheet.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/TLS_Cipher_String_Cheat_Sheet.html"
        ]
    },
    {
        "category": "Communication",
        "sub_category": "Server Communication Security",
        "id": "ASVS-9.2.1",
        "description": "Verify that connections to and from the server use trusted TLS certificates. Where internally generated or self-signed certificates are used, the server must be configured to only trust specific internal CAs and specific self-signed certificates. All others should be rejected.",
        "cwe_ids": [
            295
        ],
        "nist": [],
        "feature_name": "Verify TLS certificates and trust chain",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [
            "Configuration"
        ],
        "references": []
    },
    {
        "category": "Communication",
        "sub_category": "Server Communication Security",
        "id": "ASVS-9.2.2",
        "description": "Verify that encrypted communications such as TLS is used for all inbound and outbound connections, including for management ports, monitoring, authentication, API, or web service calls, database, cloud, serverless, mainframe, external, and partner connections. The server must not fall back to insecure or unencrypted protocols.",
        "cwe_ids": [
            319
        ],
        "nist": [],
        "feature_name": "Encrypt all communications",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": []
    },
    {
        "category": "Communication",
        "sub_category": "Server Communication Security",
        "id": "ASVS-9.2.3",
        "description": "Verify that all encrypted connections to external systems that involve sensitive information or functions are authenticated.",
        "cwe_ids": [
            287
        ],
        "nist": [],
        "feature_name": "Authenticate all external connections",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": []
    },
    {
        "category": "Communication",
        "sub_category": "Server Communication Security",
        "id": "ASVS-9.2.4",
        "description": "Verify that proper certification revocation, such as Online Certificate Status Protocol (OCSP) Stapling, is enabled and configured.",
        "cwe_ids": [
            299
        ],
        "nist": [],
        "feature_name": "Enable certification revocation",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": []
    },
    {
        "category": "Communication",
        "sub_category": "Server Communication Security",
        "id": "ASVS-9.2.5",
        "description": "Verify that backend TLS connection failures are logged.",
        "cwe_ids": [
            544
        ],
        "nist": [],
        "feature_name": "Log TLS connection failures",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": []
    },
    {
        "category": "Stored Cryptography",
        "sub_category": "Data Classification",
        "id": "ASVS-6.1.1",
        "description": "Verify that regulated private data is stored encrypted while at rest, such as Personally Identifiable Information (PII), sensitive personal information, or data assessed likely to be subject to EU's GDPR.",
        "cwe_ids": [
            311
        ],
        "nist": [],
        "feature_name": "Encrypt personal data at rest",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": [
            "https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Abuse_Case_Cheat_Sheet.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/User_Privacy_Protection_Cheat_Sheet.html"
        ]
    },
    {
        "category": "Stored Cryptography",
        "sub_category": "Data Classification",
        "id": "ASVS-6.1.2",
        "description": "Verify that regulated health data is stored encrypted while at rest, such as medical records, medical device details, or de-anonymized research records.",
        "cwe_ids": [
            311
        ],
        "nist": [],
        "feature_name": "Encrypt health data at rest",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": [
            "https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Abuse_Case_Cheat_Sheet.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/User_Privacy_Protection_Cheat_Sheet.html"
        ]
    },
    {
        "category": "Stored Cryptography",
        "sub_category": "Data Classification",
        "id": "ASVS-6.1.3",
        "description": "Verify that regulated financial data is stored encrypted while at rest, such as financial accounts, defaults or credit history, tax records, pay history, beneficiaries, or de-anonymized market or research records.",
        "cwe_ids": [
            311
        ],
        "nist": [],
        "feature_name": "Encrypt financial data at rest",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": [
            "https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Abuse_Case_Cheat_Sheet.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/User_Privacy_Protection_Cheat_Sheet.html"
        ]
    },
    {
        "category": "Stored Cryptography",
        "sub_category": "Algorithms",
        "id": "ASVS-6.2.1",
        "description": "Verify that all cryptographic modules fail securely, and errors are handled in a way that does not enable Padding Oracle attacks.",
        "cwe_ids": [
            310
        ],
        "nist": [],
        "feature_name": "Let cryptographic modules fail securely",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": [
            "https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/02-Testing_for_Padding_Oracle.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Key_Management_Cheat_Sheet.html"
        ]
    },
    {
        "category": "Stored Cryptography",
        "sub_category": "Algorithms",
        "id": "ASVS-6.2.2",
        "description": "Verify that industry proven or government approved cryptographic algorithms, modes, and libraries are used, instead of custom coded cryptography.",
        "cwe_ids": [
            327
        ],
        "nist": [],
        "feature_name": "Use approved cryptographic algorithms",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": [
            "https://owasp-top-10-proactive-controls-2018.readthedocs.io/en/latest/c8-protect-data-everywhere.html",
            "https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Key_Management_Cheat_Sheet.html"
        ]
    },
    {
        "category": "Stored Cryptography",
        "sub_category": "Algorithms",
        "id": "ASVS-6.2.3",
        "description": "Verify that encryption initialization vector, cipher configuration, and block modes are configured securely using the latest advice.",
        "cwe_ids": [
            326
        ],
        "nist": [],
        "feature_name": "Use state of the art cryptographic configuration",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": [
            "https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Key_Management_Cheat_Sheet.html"
        ]
    },
    {
        "category": "Stored Cryptography",
        "sub_category": "Algorithms",
        "id": "ASVS-6.2.4",
        "description": "Verify that random number, encryption or hashing algorithms, key lengths, rounds, ciphers or modes, can be reconfigured, upgraded, or swapped at any time, to protect against cryptographic breaks.",
        "cwe_ids": [
            326
        ],
        "nist": [],
        "feature_name": "Ensure cryptographic elements can be upgraded or replaced",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": [
            "https://owasp-top-10-proactive-controls-2018.readthedocs.io/en/latest/c8-protect-data-everywhere.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Key_Management_Cheat_Sheet.html"
        ]
    },
    {
        "category": "Stored Cryptography",
        "sub_category": "Algorithms",
        "id": "ASVS-6.2.5",
        "description": "Verify that known insecure block modes (i.e. ECB, etc.), padding modes (i.e. PKCS#1 v1.5, etc.), ciphers with small block sizes (i.e. Triple-DES, Blowfish, etc.), and weak hashing algorithms (i.e. MD5, SHA1, etc.) are not used unless required for backwards compatibility.",
        "cwe_ids": [
            326
        ],
        "nist": [],
        "feature_name": "Use weak crypto only for backwards compatibility",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": [
            "https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Key_Management_Cheat_Sheet.html"
        ]
    },
    {
        "category": "Stored Cryptography",
        "sub_category": "Algorithms",
        "id": "ASVS-6.2.6",
        "description": "Verify that nonces, initialization vectors, and other single use numbers must not be used more than once with a given encryption key. The method of generation must be appropriate for the algorithm being used.",
        "cwe_ids": [
            326
        ],
        "nist": [],
        "feature_name": "Use nonces and initialization vectors only once",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": [
            "https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Key_Management_Cheat_Sheet.html"
        ]
    },
    {
        "category": "Stored Cryptography",
        "sub_category": "Algorithms",
        "id": "ASVS-6.2.7",
        "description": "Verify that encrypted data is authenticated via signatures, authenticated cipher modes, or HMAC to ensure that ciphertext is not altered by an unauthorized party.",
        "cwe_ids": [
            326
        ],
        "nist": [],
        "feature_name": "Authenticate encrypted data",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": [
            "https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Key_Management_Cheat_Sheet.html"
        ]
    },
    {
        "category": "Stored Cryptography",
        "sub_category": "Algorithms",
        "id": "ASVS-6.2.8",
        "description": "Verify that all cryptographic operations are constant-time, with no 'short-circuit' operations in comparisons, calculations, or returns, to avoid leaking information.",
        "cwe_ids": [
            385
        ],
        "nist": [],
        "feature_name": "Perform cryptographic operations in constant time",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": [
            "https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Key_Management_Cheat_Sheet.html"
        ]
    },
    {
        "category": "Stored Cryptography",
        "sub_category": "Random Values",
        "id": "ASVS-6.3.1",
        "description": "Verify that all random numbers, random file names, random GUIDs, and random strings are generated using the cryptographic module's approved cryptographically secure random number generator when these random values are intended to be not guessable by an attacker.",
        "cwe_ids": [
            338
        ],
        "nist": [],
        "feature_name": "Use cryptographically secure random number generators",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": [
            "https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption.html"
        ]
    },
    {
        "category": "Stored Cryptography",
        "sub_category": "Random Values",
        "id": "ASVS-6.3.2",
        "description": "Verify that random GUIDs are created using the GUID v4 algorithm, and a Cryptographically-secure Pseudo-random Number Generator (CSPRNG). GUIDs created using other pseudo-random number generators may be predictable.",
        "cwe_ids": [
            338
        ],
        "nist": [],
        "feature_name": "Create random GUIDs with cryptographically secure random number generators",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": [
            "https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption.html"
        ]
    },
    {
        "category": "Stored Cryptography",
        "sub_category": "Random Values",
        "id": "ASVS-6.3.3",
        "description": "Verify that random numbers are created with proper entropy even when the application is under heavy load, or that the application degrades gracefully in such circumstances.",
        "cwe_ids": [
            338
        ],
        "nist": [],
        "feature_name": "Ensure proper generation of secure random",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": [
            "https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption.html"
        ]
    },
    {
        "category": "Stored Cryptography",
        "sub_category": "Secret Management",
        "id": "ASVS-6.4.1",
        "description": "Verify that a secrets management solution such as a key vault is used to securely create, store, control access to and destroy secrets.",
        "cwe_ids": [
            798
        ],
        "nist": [],
        "feature_name": "Use a dedicated secrets management solution",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": [
            "https://owasp-top-10-proactive-controls-2018.readthedocs.io/en/latest/c8-protect-data-everywhere.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Key_Management_Cheat_Sheet.html"
        ]
    },
    {
        "category": "Stored Cryptography",
        "sub_category": "Secret Management",
        "id": "ASVS-6.4.2",
        "description": "Verify that key material is not exposed to the application but instead uses an isolated security module like a vault for cryptographic operations.",
        "cwe_ids": [
            320
        ],
        "nist": [],
        "feature_name": "Use an isolated security module for cryptographic operations",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": [
            "https://owasp-top-10-proactive-controls-2018.readthedocs.io/en/latest/c8-protect-data-everywhere.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Key_Management_Cheat_Sheet.html"
        ]
    },
    {
        "category": "Business Logic",
        "sub_category": "Business Logic Security",
        "id": "ASVS-11.1.1",
        "description": "Verify that the application will only process business logic flows for the same user in sequential step order and without skipping steps.",
        "cwe_ids": [
            841
        ],
        "nist": [],
        "feature_name": "Enforce natural sequence of business flows to avoid abuse",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": [
            "https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/10-Business_Logic_Testing/README.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Abuse_Case_Cheat_Sheet.html"
        ]
    },
    {
        "category": "Business Logic",
        "sub_category": "Business Logic Security",
        "id": "ASVS-11.1.2",
        "description": "Verify that the application will only process business logic flows with all steps being processed in realistic human time, i.e. transactions are not submitted too quickly.",
        "cwe_ids": [
            799
        ],
        "nist": [],
        "feature_name": "Monitor for realistic \"human time\" business logic flows",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": [
            "https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/10-Business_Logic_Testing/README.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Abuse_Case_Cheat_Sheet.html"
        ]
    },
    {
        "category": "Business Logic",
        "sub_category": "Business Logic Security",
        "id": "ASVS-11.1.3",
        "description": "Verify the application has appropriate limits for specific business actions or transactions which are correctly enforced on a per user basis.",
        "cwe_ids": [
            770
        ],
        "nist": [],
        "feature_name": "Limit/authorize user's access to functionality",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": [
            "https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/10-Business_Logic_Testing/README.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Abuse_Case_Cheat_Sheet.html"
        ]
    },
    {
        "category": "Business Logic",
        "sub_category": "Business Logic Security",
        "id": "ASVS-11.1.4",
        "description": "Verify that the application has anti-automation controls to protect against excessive calls such as mass data exfiltration, business logic requests, file uploads or denial of service attacks.",
        "cwe_ids": [
            770
        ],
        "nist": [],
        "feature_name": "Monitor suspected automation abuse",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": [
            "https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/10-Business_Logic_Testing/README.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Abuse_Case_Cheat_Sheet.html"
        ]
    },
    {
        "category": "Business Logic",
        "sub_category": "Business Logic Security",
        "id": "ASVS-11.1.5",
        "description": "Verify the application has business logic limits or validation to protect against likely business risks or threats, identified using threat modeling or similar methodologies.",
        "cwe_ids": [
            841
        ],
        "nist": [],
        "feature_name": "Implement business logic limits against identified business risks",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": [
            "https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/10-Business_Logic_Testing/README.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Abuse_Case_Cheat_Sheet.html"
        ]
    },
    {
        "category": "Business Logic",
        "sub_category": "Business Logic Security",
        "id": "ASVS-11.1.6",
        "description": "Verify that the application does not suffer from \"Time Of Check to Time Of Use\" (TOCTOU) issues or other race conditions for sensitive operations.",
        "cwe_ids": [
            367
        ],
        "nist": [],
        "feature_name": "Protect sensitive functionalities against race conditions",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": [
            "https://cheatsheetseries.owasp.org/cheatsheets/Abuse_Case_Cheat_Sheet.html"
        ]
    },
    {
        "category": "Business Logic",
        "sub_category": "Business Logic Security",
        "id": "ASVS-11.1.7",
        "description": "Verify that the application monitors for unusual events or activity from a business logic perspective. For example, attempts to perform actions out of order or actions which a normal user would never attempt.",
        "cwe_ids": [
            754
        ],
        "nist": [],
        "feature_name": "Monitor unusual activities on system",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": [
            "https://owasp-top-10-proactive-controls-2018.readthedocs.io/en/latest/c9-implement-security-logging-monitoring.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Abuse_Case_Cheat_Sheet.html"
        ]
    },
    {
        "category": "Business Logic",
        "sub_category": "Business Logic Security",
        "id": "ASVS-11.1.8",
        "description": "Verify that the application has configurable alerting when automated attacks or unusual activity is detected.",
        "cwe_ids": [
            390
        ],
        "nist": [],
        "feature_name": "Enable configurable alert against usage anomalies",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": [
            "https://cheatsheetseries.owasp.org/cheatsheets/Abuse_Case_Cheat_Sheet.html"
        ]
    },
    {
        "category": "API and Web Service",
        "sub_category": "Generic Web Service Security",
        "id": "ASVS-13.1.1",
        "description": "Verify that all application components use the same encodings and parsers to avoid parsing attacks that exploit different URI or file parsing behavior that could be used in SSRF and RFI attacks.",
        "cwe_ids": [
            116
        ],
        "nist": [],
        "feature_name": "Force uniform encoders and parsers throughout system",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": [
            "https://cheatsheetseries.owasp.org/cheatsheets/Web_Service_Security_Cheat_Sheet.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet.html"
        ]
    },
    {
        "category": "API and Web Service",
        "sub_category": "Generic Web Service Security",
        "id": "ASVS-13.1.3",
        "description": "Verify API URLs do not expose sensitive information, such as the API key, session tokens etc.",
        "cwe_ids": [
            598
        ],
        "nist": [],
        "feature_name": "Do not expose data through API URLs",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [
            "Configuration"
        ],
        "references": [
            "https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/06-Session_Management_Testing/04-Testing_for_Exposed_Session_Variables.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Web_Service_Security_Cheat_Sheet.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet.html"
        ]
    },
    {
        "category": "API and Web Service",
        "sub_category": "Generic Web Service Security",
        "id": "ASVS-13.1.4",
        "description": "Verify that authorization decisions are made at both the URI, enforced by programmatic or declarative security at the controller or router, and at the resource level, enforced by model-based permissions.",
        "cwe_ids": [
            285
        ],
        "nist": [],
        "feature_name": "Enforce model-based authorization both at URI and final resource",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": [
            "https://cheatsheetseries.owasp.org/cheatsheets/Web_Service_Security_Cheat_Sheet.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet.html"
        ]
    },
    {
        "category": "API and Web Service",
        "sub_category": "Generic Web Service Security",
        "id": "ASVS-13.1.5",
        "description": "Verify that requests containing unexpected or missing content types are rejected with appropriate headers (HTTP response status 406 Unacceptable or 415 Unsupported Media Type).",
        "cwe_ids": [
            434
        ],
        "nist": [],
        "feature_name": "Reject non-whitelisted content types",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": [
            "https://cheatsheetseries.owasp.org/cheatsheets/Web_Service_Security_Cheat_Sheet.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet.html"
        ]
    },
    {
        "category": "API and Web Service",
        "sub_category": "RESTful Web Service",
        "id": "ASVS-13.2.1",
        "description": "Verify that enabled RESTful HTTP methods are a valid choice for the user or action, such as preventing normal users using DELETE or PUT on protected API or resources.",
        "cwe_ids": [
            650
        ],
        "nist": [],
        "feature_name": "Limit REST HTTP methods",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": [
            "https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/07-Input_Validation_Testing/03-Testing_for_HTTP_Verb_Tampering.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/REST_Assessment_Cheat_Sheet.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html"
        ]
    },
    {
        "category": "API and Web Service",
        "sub_category": "RESTful Web Service",
        "id": "ASVS-13.2.2",
        "description": "Verify that JSON schema validation is in place and verified before accepting input.",
        "cwe_ids": [
            20
        ],
        "nist": [],
        "feature_name": "Enforce JSON schema before processing",
        "user_story": "As a security champion, I want all input to be validated against a JSON schema before being accepted so I can protect my application against injection attacks",
        "scenarios": {
            "Input conformance to specifications": "Given functions processing externally provided JSON input\nWhen I parse or encode such inputs\nThen I validate that inputs are conforming to specification"
        },
        "tags": [],
        "references": [
            "https://cheatsheetseries.owasp.org/cheatsheets/REST_Assessment_Cheat_Sheet.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html"
        ]
    },
    {
        "category": "API and Web Service",
        "sub_category": "RESTful Web Service",
        "id": "ASVS-13.2.3",
        "description": "Verify that RESTful web services that utilize cookies are protected from Cross-Site Request Forgery via the use of at least one or more of the following: double submit cookie pattern, CSRF nonces, or Origin request header checks.",
        "cwe_ids": [
            352
        ],
        "nist": [],
        "feature_name": "Add CSRF protection for cookie based REST services",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": [
            "https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/06-Session_Management_Testing/05-Testing_for_Cross_Site_Request_Forgery.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/REST_Assessment_Cheat_Sheet.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html"
        ]
    },
    {
        "category": "API and Web Service",
        "sub_category": "RESTful Web Service",
        "id": "ASVS-13.2.5",
        "description": "Verify that REST services explicitly check the incoming Content-Type to be the expected one, such as application/xml or application/json.",
        "cwe_ids": [
            436
        ],
        "nist": [],
        "feature_name": "Verify content-type for REST services",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": [
            "https://cheatsheetseries.owasp.org/cheatsheets/REST_Assessment_Cheat_Sheet.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html"
        ]
    },
    {
        "category": "API and Web Service",
        "sub_category": "RESTful Web Service",
        "id": "ASVS-13.2.6",
        "description": "Verify that the message headers and payload are trustworthy and not modified in transit. Requiring strong encryption for transport (TLS only) may be sufficient in many cases as it provides both confidentiality and integrity protection. Per-message digital signatures can provide additional assurance on top of the transport protections for high-security applications but bring with them additional complexity and risks to weigh against the benefits.",
        "cwe_ids": [
            345
        ],
        "nist": [],
        "feature_name": "Verify the authenticity of both headers and payload",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": [
            "https://cheatsheetseries.owasp.org/cheatsheets/REST_Assessment_Cheat_Sheet.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html"
        ]
    },
    {
        "category": "API and Web Service",
        "sub_category": "SOAP Web Service",
        "id": "ASVS-13.3.1",
        "description": "Verify that XSD schema validation takes place to ensure a properly formed XML document, followed by validation of each input field before any processing of that data takes place.",
        "cwe_ids": [
            20
        ],
        "nist": [],
        "feature_name": "Enforce schema on XML structure/field",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": [
            "https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/07-Input_Validation_Testing/07-Testing_for_XML_Injection.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/XML_Security_Cheat_Sheet.html"
        ]
    },
    {
        "category": "API and Web Service",
        "sub_category": "SOAP Web Service",
        "id": "ASVS-13.3.2",
        "description": "Verify that the message payload is signed using WS-Security to ensure reliable transport between client and service.",
        "cwe_ids": [
            345
        ],
        "nist": [],
        "feature_name": "Add integrity check to SOAP payload",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": [
            "https://cheatsheetseries.owasp.org/cheatsheets/XML_Security_Cheat_Sheet.html"
        ]
    },
    {
        "category": "API and Web Service",
        "sub_category": "GraphQL",
        "id": "ASVS-13.4.1",
        "description": "Verify that a query allow list or a combination of depth limiting and amount limiting is used to prevent GraphQL or data layer expression Denial of Service (DoS) as a result of expensive, nested queries. For more advanced scenarios, query cost analysis should be used.",
        "cwe_ids": [
            770
        ],
        "nist": [],
        "feature_name": "Limit query impact GraphQL/data layer expression DoS",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [
            "DOS"
        ],
        "references": []
    },
    {
        "category": "API and Web Service",
        "sub_category": "GraphQL",
        "id": "ASVS-13.4.2",
        "description": "Verify that GraphQL or other data layer authorization logic should be implemented at the business logic layer instead of the GraphQL layer.",
        "cwe_ids": [
            285
        ],
        "nist": [],
        "feature_name": "Separate GraphQL (or similar) authorization logic from data layer",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": []
    },
    {
        "category": "Configuration",
        "sub_category": "Build and Deploy",
        "id": "ASVS-14.1.1",
        "description": "Verify that the application build and deployment processes are performed in a secure and repeatable way, such as CI / CD automation, automated configuration management, and automated deployment scripts.",
        "cwe_ids": [],
        "nist": [],
        "feature_name": "Securely automate build and deployment in pipeline",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": [
            "https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html"
        ]
    },
    {
        "category": "Configuration",
        "sub_category": "Build and Deploy",
        "id": "ASVS-14.1.2",
        "description": "Verify that compiler flags are configured to enable all available buffer overflow protections and warnings, including stack randomization, data execution prevention, and to break the build if an unsafe pointer, memory, format string, integer, or string operations are found.",
        "cwe_ids": [
            120
        ],
        "nist": [],
        "feature_name": "Set proper (C) compiler flags",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": [
            "https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html"
        ]
    },
    {
        "category": "Configuration",
        "sub_category": "Build and Deploy",
        "id": "ASVS-14.1.3",
        "description": "Verify that server configuration is hardened as per the recommendations of the application server and frameworks in use.",
        "cwe_ids": [
            16
        ],
        "nist": [],
        "feature_name": "Proper Configuration for all applications and frameworks",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [
            "Configuration"
        ],
        "references": [
            "https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html"
        ]
    },
    {
        "category": "Configuration",
        "sub_category": "Build and Deploy",
        "id": "ASVS-14.1.4",
        "description": "Verify that the application, configuration, and all dependencies can be re-deployed using automated deployment scripts, built from a documented and tested runbook in a reasonable time, or restored from backups in a timely fashion.",
        "cwe_ids": [],
        "nist": [],
        "feature_name": "Ensure repeatability of deployment",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": [
            "https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html"
        ]
    },
    {
        "category": "Configuration",
        "sub_category": "Build and Deploy",
        "id": "ASVS-14.1.5",
        "description": "Verify that authorized administrators can verify the integrity of all security-relevant configurations to detect tampering.",
        "cwe_ids": [],
        "nist": [],
        "feature_name": "Set and confirm integrity of security deployment configuration",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": [
            "https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html"
        ]
    },
    {
        "category": "Configuration",
        "sub_category": "Dependency",
        "id": "ASVS-14.2.1",
        "description": "Verify that all components are up to date, preferably using a dependency checker during build or compile time.",
        "cwe_ids": [
            1026
        ],
        "nist": [],
        "feature_name": "Update third party components build- or compile time",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": [
            "https://owasp-top-10-proactive-controls-2018.readthedocs.io/en/latest/c2-leverage-security-frameworks-libraries.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Vulnerable_Dependency_Management_Cheat_Sheet.html"
        ]
    },
    {
        "category": "Configuration",
        "sub_category": "Dependency",
        "id": "ASVS-14.2.2",
        "description": "Verify that all unneeded features, documentation, sample applications and configurations are removed.",
        "cwe_ids": [
            1002
        ],
        "nist": [],
        "feature_name": "Remove unnecessary features, documentation, configuration etc",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [
            "Configuration"
        ],
        "references": [
            "https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/04-Review_Old_Backup_and_Unreferenced_Files_for_Sensitive_Information.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Vulnerable_Dependency_Management_Cheat_Sheet.html"
        ]
    },
    {
        "category": "Configuration",
        "sub_category": "Dependency",
        "id": "ASVS-14.2.3",
        "description": "Verify that if application assets, such as JavaScript libraries, CSS or web fonts, are hosted externally on a Content Delivery Network (CDN) or external provider, Subresource Integrity (SRI) is used to validate the integrity of the asset.",
        "cwe_ids": [
            829
        ],
        "nist": [],
        "feature_name": "Enforce integrity check for externally hosted assets (eg SRI)",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": [
            "https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Vulnerable_Dependency_Management_Cheat_Sheet.html"
        ]
    },
    {
        "category": "Configuration",
        "sub_category": "Dependency",
        "id": "ASVS-14.2.4",
        "description": "Verify that third party components come from pre-defined, trusted and continually maintained repositories.",
        "cwe_ids": [
            829
        ],
        "nist": [],
        "feature_name": "Ensure trusted origin of third party resources",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": [
            "https://owasp-top-10-proactive-controls-2018.readthedocs.io/en/latest/c2-leverage-security-frameworks-libraries.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Vulnerable_Dependency_Management_Cheat_Sheet.html"
        ]
    },
    {
        "category": "Configuration",
        "sub_category": "Dependency",
        "id": "ASVS-14.2.5",
        "description": "Verify that a Software Bill of Materials (SBOM) is maintained of all third party libraries in use.",
        "cwe_ids": [],
        "nist": [],
        "feature_name": "Maintain/manage inventory of third party repositories",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": [
            "https://owasp-top-10-proactive-controls-2018.readthedocs.io/en/latest/c2-leverage-security-frameworks-libraries.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Vulnerable_Dependency_Management_Cheat_Sheet.html"
        ]
    },
    {
        "category": "Configuration",
        "sub_category": "Dependency",
        "id": "ASVS-14.2.6",
        "description": "Verify that the attack surface is reduced by sandboxing or encapsulating third party libraries to expose only the required behaviour into the application.",
        "cwe_ids": [
            265
        ],
        "nist": [],
        "feature_name": "Sandbox third party libraries",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": [
            "https://owasp-top-10-proactive-controls-2018.readthedocs.io/en/latest/c2-leverage-security-frameworks-libraries.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Vulnerable_Dependency_Management_Cheat_Sheet.html"
        ]
    },
    {
        "category": "Configuration",
        "sub_category": "Unintended Security Disclosure",
        "id": "ASVS-14.3.2",
        "description": "Verify that web or application server and application framework debug modes are disabled in production to eliminate debug features, developer consoles, and unintended security disclosures.",
        "cwe_ids": [
            497
        ],
        "nist": [],
        "feature_name": "Disable debug mode in production",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": [
            "https://cheatsheetseries.owasp.org/cheatsheets/Error_Handling_Cheat_Sheet.html"
        ]
    },
    {
        "category": "Configuration",
        "sub_category": "Unintended Security Disclosure",
        "id": "ASVS-14.3.3",
        "description": "Verify that the HTTP headers or any part of the HTTP response do not expose detailed version information of system components.",
        "cwe_ids": [
            200
        ],
        "nist": [],
        "feature_name": "Do not disclose technical information in HTTP header or response",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": [
            "https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/01-Information_Gathering/README.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Error_Handling_Cheat_Sheet.html"
        ]
    },
    {
        "category": "Configuration",
        "sub_category": "HTTP Security Headers",
        "id": "ASVS-14.4.1",
        "description": "Verify that every HTTP response contains a Content-Type header. Also specify a safe character set (e.g., UTF-8, ISO-8859-1) if the content types are text/*, /+xml and application/xml. Content must match with the provided Content-Type header.",
        "cwe_ids": [
            173
        ],
        "nist": [],
        "feature_name": "Set content HTTP response type",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": [
            "https://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html"
        ]
    },
    {
        "category": "Configuration",
        "sub_category": "HTTP Security Headers",
        "id": "ASVS-14.4.2",
        "description": "Verify that all API responses contain a Content-Disposition: attachment; filename=\"api.json\" header (or other appropriate filename for the content type).",
        "cwe_ids": [
            116
        ],
        "nist": [],
        "feature_name": "Set metadata/content-Disposition for API responses",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": [
            "https://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html"
        ]
    },
    {
        "category": "Configuration",
        "sub_category": "HTTP Security Headers",
        "id": "ASVS-14.4.3",
        "description": "Verify that a Content Security Policy (CSP) response header is in place that helps mitigate impact for XSS attacks like HTML, DOM, JSON, and JavaScript injection vulnerabilities.",
        "cwe_ids": [
            1021
        ],
        "nist": [],
        "feature_name": "Configure CSP configuration properly",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [
            "XSS"
        ],
        "references": [
            "https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/07-Input_Validation_Testing/01-Testing_for_Reflected_Cross_Site_Scripting.html; https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/07-Input_Validation_Testing/02-Testing_for_Stored_Cross_Site_Scripting.html; https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/11-Client_Side_Testing/01-Testing_for_DOM-based_Cross_Site_Scripting.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html"
        ]
    },
    {
        "category": "Configuration",
        "sub_category": "HTTP Security Headers",
        "id": "ASVS-14.4.4",
        "description": "Verify that all responses contain a X-Content-Type-Options: nosniff header.",
        "cwe_ids": [
            116
        ],
        "nist": [],
        "feature_name": "Configure X-Content-Type-Options properly",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": [
            "https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/07-Input_Validation_Testing/01-Testing_for_Reflected_Cross_Site_Scripting.html; https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/07-Input_Validation_Testing/02-Testing_for_Stored_Cross_Site_Scripting.html; https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/11-Client_Side_Testing/01-Testing_for_DOM-based_Cross_Site_Scripting.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html"
        ]
    },
    {
        "category": "Configuration",
        "sub_category": "HTTP Security Headers",
        "id": "ASVS-14.4.5",
        "description": "Verify that a Strict-Transport-Security header is included on all responses and for all subdomains, such as Strict-Transport-Security: max-age=15724800; includeSubdomains.",
        "cwe_ids": [
            523
        ],
        "nist": [],
        "feature_name": "Configure HSTS configuration properly",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": [
            "https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/07-Test_HTTP_Strict_Transport_Security.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html"
        ]
    },
    {
        "category": "Configuration",
        "sub_category": "HTTP Security Headers",
        "id": "ASVS-14.4.6",
        "description": "Verify that a suitable Referrer-Policy header is included to avoid exposing sensitive information in the URL through the Referer header to untrusted parties.",
        "cwe_ids": [
            116
        ],
        "nist": [],
        "feature_name": "Configure Referrer-Policy properly",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": [
            "https://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html"
        ]
    },
    {
        "category": "Configuration",
        "sub_category": "HTTP Security Headers",
        "id": "ASVS-14.4.7",
        "description": "Verify that the content of a web application cannot be embedded in a third-party site by default and that embedding of the exact resources is only allowed where necessary by using suitable Content-Security-Policy: frame-ancestors and X-Frame-Options response headers.",
        "cwe_ids": [
            1021
        ],
        "nist": [],
        "feature_name": "Prevent Click jacking through X-Frame-Options or CSP",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": [
            "https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/11-Client_Side_Testing/09-Testing_for_Clickjacking.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html"
        ]
    },
    {
        "category": "Configuration",
        "sub_category": "HTTP Request Header Validation",
        "id": "ASVS-14.5.1",
        "description": "Verify that the application server only accepts the HTTP methods in use by the application/API, including pre-flight OPTIONS, and logs/alerts on any requests that are not valid for the application context.",
        "cwe_ids": [
            749
        ],
        "nist": [],
        "feature_name": "White-list HTTP methods",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": [
            "https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/06-Test_HTTP_Methods.html"
        ]
    },
    {
        "category": "Configuration",
        "sub_category": "HTTP Request Header Validation",
        "id": "ASVS-14.5.2",
        "description": "Verify that the supplied Origin header is not used for authentication or access control decisions, as the Origin header can easily be changed by an attacker.",
        "cwe_ids": [
            346
        ],
        "nist": [],
        "feature_name": "Avoid using of Origin header for authentication of access control",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": []
    },
    {
        "category": "Configuration",
        "sub_category": "HTTP Request Header Validation",
        "id": "ASVS-14.5.3",
        "description": "Verify that the Cross-Origin Resource Sharing (CORS) Access-Control-Allow-Origin header uses a strict allow list of trusted domains and subdomains to match against and does not support the \"null\" origin.",
        "cwe_ids": [
            346
        ],
        "nist": [],
        "feature_name": "Whitelist CORS resources",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": [
            "https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/11-Client_Side_Testing/07-Testing_Cross_Origin_Resource_Sharing.html"
        ]
    },
    {
        "category": "Configuration",
        "sub_category": "HTTP Request Header Validation",
        "id": "ASVS-14.5.4",
        "description": "Verify that HTTP headers added by a trusted proxy or SSO devices, such as a bearer token, are authenticated by the application.",
        "cwe_ids": [
            306
        ],
        "nist": [],
        "feature_name": "Authenticate HTTP headers added by a trusted proxy or SSO device",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": []
    },
    {
        "category": "Access Control",
        "sub_category": "General Access Control Design",
        "id": "ASVS-4.1.1",
        "description": "Verify that the application enforces access control rules on a trusted service layer, especially if client-side access control is present and could be bypassed.",
        "cwe_ids": [
            602
        ],
        "nist": [],
        "feature_name": "Enforce access control on trusted service layer",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [
            "Architecture"
        ],
        "references": [
            "https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/05-Authorization_Testing/02-Testing_for_Bypassing_Authorization_Schema.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Access_Control_Cheat_Sheet.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Authorization_Testing_Automation_Cheat_Sheet.html"
        ]
    },
    {
        "category": "Access Control",
        "sub_category": "General Access Control Design",
        "id": "ASVS-4.1.2",
        "description": "Verify that all user and data attributes and policy information used by access controls cannot be manipulated by end users unless specifically authorized.",
        "cwe_ids": [
            639
        ],
        "nist": [],
        "feature_name": "Limit modification of access controls to specifically authorized actors/users",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": [
            "https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/05-Authorization_Testing/02-Testing_for_Bypassing_Authorization_Schema.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Access_Control_Cheat_Sheet.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Authorization_Testing_Automation_Cheat_Sheet.html"
        ]
    },
    {
        "category": "Access Control",
        "sub_category": "General Access Control Design",
        "id": "ASVS-4.1.3",
        "description": "Verify that the principle of least privilege exists - users should only be able to access functions, data files, URLs, controllers, services, and other resources, for which they possess specific authorization. This implies protection against spoofing and elevation of privilege.",
        "cwe_ids": [
            285
        ],
        "nist": [],
        "feature_name": "Enforce least privilege",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": [
            "https://owasp-top-10-proactive-controls-2018.readthedocs.io/en/latest/c7-enforce-access-controls.html",
            "https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/03-Identity_Management_Testing/01-Test_Role_Definitions.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Access_Control_Cheat_Sheet.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Authorization_Testing_Automation_Cheat_Sheet.html"
        ]
    },
    {
        "category": "Access Control",
        "sub_category": "General Access Control Design",
        "id": "ASVS-4.1.5",
        "description": "Verify that access controls fail securely including when an exception occurs.",
        "cwe_ids": [
            285
        ],
        "nist": [],
        "feature_name": "Ensure that secure fail-safe is in place for access control",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": [
            "https://owasp-top-10-proactive-controls-2018.readthedocs.io/en/latest/c10-handle-errors-exceptions.html",
            "https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/08-Testing_for_Error_Handling/01-Testing_for_Error_Code.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Access_Control_Cheat_Sheet.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Authorization_Testing_Automation_Cheat_Sheet.html"
        ]
    },
    {
        "category": "Access Control",
        "sub_category": "Operation Level Access Control",
        "id": "ASVS-4.2.1",
        "description": "Verify that sensitive data and APIs are protected against Insecure Direct Object Reference (IDOR) attacks targeting creation, reading, updating and deletion of records, such as creating or updating someone else's record, viewing everyone's records, or deleting all records.",
        "cwe_ids": [
            639
        ],
        "nist": [],
        "feature_name": "Protect API against unauthorized access/modification (IDOR)",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": [
            "https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/05-Authorization_Testing/04-Testing_for_Insecure_Direct_Object_References.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Insecure_Direct_Object_Reference_Prevention_Cheat_Sheet.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Authorization_Testing_Automation_Cheat_Sheet.html"
        ]
    },
    {
        "category": "Access Control",
        "sub_category": "Operation Level Access Control",
        "id": "ASVS-4.2.2",
        "description": "Verify that the application or framework enforces a strong anti-CSRF mechanism to protect authenticated functionality, and effective anti-automation or anti-CSRF protects unauthenticated functionality.",
        "cwe_ids": [
            352
        ],
        "nist": [],
        "feature_name": "Use CSRF protection against authenticated functionality, add anti-automation controls for unauthenticated functionality",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": [
            "https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/06-Session_Management_Testing/05-Testing_for_Cross_Site_Request_Forgery.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Insecure_Direct_Object_Reference_Prevention_Cheat_Sheet.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Authorization_Testing_Automation_Cheat_Sheet.html"
        ]
    },
    {
        "category": "Access Control",
        "sub_category": "Other Access Control Considerations",
        "id": "ASVS-4.3.1",
        "description": "Verify administrative interfaces use appropriate multi-factor authentication to prevent unauthorized use.",
        "cwe_ids": [
            419
        ],
        "nist": [],
        "feature_name": "Use multifactor authentication on administrative interfaces",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": [
            "https://cheatsheetseries.owasp.org/cheatsheets/REST_Assessment_Cheat_Sheet.html"
        ]
    },
    {
        "category": "Access Control",
        "sub_category": "Other Access Control Considerations",
        "id": "ASVS-4.3.2",
        "description": "Verify that directory browsing is disabled unless deliberately desired. Additionally, applications should not allow discovery or disclosure of file or directory metadata, such as Thumbs.db, .DS_Store, .git or .svn folders.",
        "cwe_ids": [
            548
        ],
        "nist": [],
        "feature_name": "Protect against directory browsing/discovery attacks",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [
            "Configuration"
        ],
        "references": [
            "https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/03-Test_File_Extensions_Handling_for_Sensitive_Information.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/REST_Assessment_Cheat_Sheet.html"
        ]
    },
    {
        "category": "Access Control",
        "sub_category": "Other Access Control Considerations",
        "id": "ASVS-4.3.3",
        "description": "Verify the application has additional authorization (such as step up or adaptive authentication) for lower value systems, and / or segregation of duties for high value applications to enforce anti-fraud controls as per the risk of application and past fraud.",
        "cwe_ids": [
            732
        ],
        "nist": [],
        "feature_name": "Enforce additional authorization and segregation of duties",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": [
            "https://cheatsheetseries.owasp.org/cheatsheets/REST_Assessment_Cheat_Sheet.html"
        ]
    },
    {
        "category": "Files and Resources",
        "sub_category": "File Upload",
        "id": "ASVS-12.1.1",
        "description": "Verify that the application will not accept large files that could fill up storage or cause a denial of service.",
        "cwe_ids": [
            400
        ],
        "nist": [],
        "feature_name": "Validate max input/file sizes",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [
            "DOS"
        ],
        "references": [
            "https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/10-Business_Logic_Testing/09-Test_Upload_of_Malicious_Files.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/File_Upload_Cheat_Sheet.html"
        ]
    },
    {
        "category": "Files and Resources",
        "sub_category": "File Upload",
        "id": "ASVS-12.1.2",
        "description": "Verify that the application checks compressed files (e.g. zip, gz, docx, odt) against maximum allowed uncompressed size and against maximum number of files before uncompressing the file.",
        "cwe_ids": [
            409
        ],
        "nist": [],
        "feature_name": "Check uploaded archives for decompression attacks (eg zip bombs)",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [
            "DOS"
        ],
        "references": [
            "https://cheatsheetseries.owasp.org/cheatsheets/File_Upload_Cheat_Sheet.html"
        ]
    },
    {
        "category": "Files and Resources",
        "sub_category": "File Upload",
        "id": "ASVS-12.1.3",
        "description": "Verify that a file size quota and maximum number of files per user is enforced to ensure that a single user cannot fill up the storage with too many files, or excessively large files.",
        "cwe_ids": [
            770
        ],
        "nist": [],
        "feature_name": "Limit size and number of uploaded files",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [
            "DOS"
        ],
        "references": [
            "https://cheatsheetseries.owasp.org/cheatsheets/File_Upload_Cheat_Sheet.html"
        ]
    },
    {
        "category": "Files and Resources",
        "sub_category": "File Integrity",
        "id": "ASVS-12.2.1",
        "description": "Verify that files obtained from untrusted sources are validated to be of expected type based on the file's content.",
        "cwe_ids": [
            434
        ],
        "nist": [],
        "feature_name": "Validate file type of data from untrusted sources",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": [
            "https://cheatsheetseries.owasp.org/cheatsheets/File_Upload_Cheat_Sheet.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Third_Party_Javascript_Management_Cheat_Sheet.html"
        ]
    },
    {
        "category": "Files and Resources",
        "sub_category": "File Execution",
        "id": "ASVS-12.3.1",
        "description": "Verify that user-submitted filename metadata is not used directly by system or framework filesystems and that a URL API is used to protect against path traversal.",
        "cwe_ids": [
            22
        ],
        "nist": [],
        "feature_name": "Sanitize filename metadata from untrusted origin if processing is required",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": [
            "https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/05-Authorization_Testing/01-Testing_Directory_Traversal_File_Include.html"
        ]
    },
    {
        "category": "Files and Resources",
        "sub_category": "File Execution",
        "id": "ASVS-12.3.2",
        "description": "Verify that user-submitted filename metadata is validated or ignored to prevent the disclosure, creation, updating or removal of local files (LFI).",
        "cwe_ids": [
            73
        ],
        "nist": [],
        "feature_name": "Ignore/at least validate  filename metadata from untrusted origin (local file context, eg LFI)",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": [
            "https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/05-Authorization_Testing/01-Testing_Directory_Traversal_File_Include.html"
        ]
    },
    {
        "category": "Files and Resources",
        "sub_category": "File Execution",
        "id": "ASVS-12.3.3",
        "description": "Verify that user-submitted filename metadata is validated or ignored to prevent the disclosure or execution of remote files via Remote File Inclusion (RFI) or Server-side Request Forgery (SSRF) attacks.",
        "cwe_ids": [
            98
        ],
        "nist": [],
        "feature_name": "Ignore/at least validate  filename metadata from untrusted origin (remote file context, eg RFI)",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": [
            "https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/05-Authorization_Testing/01-Testing_Directory_Traversal_File_Include.html"
        ]
    },
    {
        "category": "Files and Resources",
        "sub_category": "File Execution",
        "id": "ASVS-12.3.4",
        "description": "Verify that the application protects against Reflective File Download (RFD) by validating or ignoring user-submitted filenames in a JSON, JSONP, or URL parameter, the response Content-Type header should be set to text/plain, and the Content-Disposition header should have a fixed filename.",
        "cwe_ids": [
            641
        ],
        "nist": [],
        "feature_name": "Ignore/at least validate filenames from untrusted origin (against RFD)",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": []
    },
    {
        "category": "Files and Resources",
        "sub_category": "File Execution",
        "id": "ASVS-12.3.5",
        "description": "Verify that untrusted file metadata is not used directly with system API or libraries, to protect against OS command injection.",
        "cwe_ids": [
            78
        ],
        "nist": [],
        "feature_name": "Block direct execution of file metadata from untrusted origin",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": [
            "https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/07-Input_Validation_Testing/12-Testing_for_Command_Injection.html"
        ]
    },
    {
        "category": "Files and Resources",
        "sub_category": "File Execution",
        "id": "ASVS-12.3.6",
        "description": "Verify that the application does not include and execute functionality from untrusted sources, such as unverified content distribution networks, JavaScript libraries, node npm libraries, or server-side DLLs.",
        "cwe_ids": [
            829
        ],
        "nist": [],
        "feature_name": "Ignore/block execution logic from untrusted sources",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": []
    },
    {
        "category": "Files and Resources",
        "sub_category": "File Storage",
        "id": "ASVS-12.4.1",
        "description": "Verify that files obtained from untrusted sources are stored outside the web root, with limited permissions.",
        "cwe_ids": [
            552
        ],
        "nist": [],
        "feature_name": "Securely store files with untrusted origin",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": [
            "https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/10-Business_Logic_Testing/09-Test_Upload_of_Malicious_Files.html"
        ]
    },
    {
        "category": "Files and Resources",
        "sub_category": "File Storage",
        "id": "ASVS-12.4.2",
        "description": "Verify that files obtained from untrusted sources are scanned by antivirus scanners to prevent upload and serving of known malicious content.",
        "cwe_ids": [
            509
        ],
        "nist": [],
        "feature_name": "Scan untrusted files for malware",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": [
            "https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/10-Business_Logic_Testing/09-Test_Upload_of_Malicious_Files.html"
        ]
    },
    {
        "category": "Files and Resources",
        "sub_category": "File Download",
        "id": "ASVS-12.5.1",
        "description": "Verify that the web tier is configured to serve only files with specific file extensions to prevent unintentional information and source code leakage. For example, backup files (e.g. .bak), temporary working files (e.g. .swp), compressed files (.zip, .tar.gz, etc) and other extensions commonly used by editors should be blocked unless required.",
        "cwe_ids": [
            552
        ],
        "nist": [],
        "feature_name": "Whitelist file extensions served by web tier",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [
            "XSS"
        ],
        "references": [
            "https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/10-Business_Logic_Testing/08-Test_Upload_of_Unexpected_File_Types.html"
        ]
    },
    {
        "category": "Files and Resources",
        "sub_category": "File Download",
        "id": "ASVS-12.5.2",
        "description": "Verify that direct requests to uploaded files will never be executed as HTML/JavaScript content.",
        "cwe_ids": [
            434
        ],
        "nist": [],
        "feature_name": "Block execution/output of uploaded files",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [
            "XSS"
        ],
        "references": [
            "https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/10-Business_Logic_Testing/09-Test_Upload_of_Malicious_Files.html"
        ]
    },
    {
        "category": "Files and Resources",
        "sub_category": "SSRF Protection",
        "id": "ASVS-12.6.1",
        "description": "Verify that the web or application server is configured with an allow list of resources or systems to which the server can send requests or load data/files from.",
        "cwe_ids": [
            918
        ],
        "nist": [],
        "feature_name": "Whitelist data sources and sinks",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [
            "DOS"
        ],
        "references": [
            "https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/10-Business_Logic_Testing/09-Test_Upload_of_Malicious_Files.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html"
        ]
    },
    {
        "category": "Validation, Sanitization and Encoding",
        "sub_category": "Input Validation",
        "id": "ASVS-5.1.1",
        "description": "Verify that the application has defenses against HTTP parameter pollution attacks, particularly if the application framework makes no distinction about the source of request parameters (GET, POST, cookies, headers, or environment variables).",
        "cwe_ids": [
            235
        ],
        "nist": [],
        "feature_name": "Validate/enforce HTTP inputs (against HTTP parameter pollution attacks)",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": [
            "https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/07-Input_Validation_Testing/04-Testing_for_HTTP_Parameter_Pollution.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Mass_Assignment_Cheat_Sheet.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html"
        ]
    },
    {
        "category": "Validation, Sanitization and Encoding",
        "sub_category": "Input Validation",
        "id": "ASVS-5.1.2",
        "description": "Verify that frameworks protect against mass parameter assignment attacks, or that the application has countermeasures to protect against unsafe parameter assignment, such as marking fields private or similar.",
        "cwe_ids": [
            915
        ],
        "nist": [],
        "feature_name": "Protect against mass parameter assignment attack",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": [
            "https://owasp-top-10-proactive-controls-2018.readthedocs.io/en/latest/c5-validate-all-inputs.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Mass_Assignment_Cheat_Sheet.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html"
        ]
    },
    {
        "category": "Validation, Sanitization and Encoding",
        "sub_category": "Input Validation",
        "id": "ASVS-5.1.3",
        "description": "Verify that all input (HTML form fields, REST requests, URL parameters, HTTP headers, cookies, batch files, RSS feeds, etc) is validated using positive validation (allow lists).",
        "cwe_ids": [
            20
        ],
        "nist": [],
        "feature_name": "Whitelist all external (HTTP) input",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": [
            "https://owasp-top-10-proactive-controls-2018.readthedocs.io/en/latest/c5-validate-all-inputs.html",
            "https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/07-Input_Validation_Testing/",
            "https://cheatsheetseries.owasp.org/cheatsheets/Mass_Assignment_Cheat_Sheet.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html"
        ]
    },
    {
        "category": "Validation, Sanitization and Encoding",
        "sub_category": "Input Validation",
        "id": "ASVS-5.1.4",
        "description": "Verify that structured data is strongly typed and validated against a defined schema including allowed characters, length and pattern (e.g. credit card numbers, e-mail addresses, telephone numbers, or validating that two related fields are reasonable, such as checking that suburb and zip/postcode match).",
        "cwe_ids": [
            20
        ],
        "nist": [],
        "feature_name": "Enforce schema on type/contents of structured data",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": [
            "https://owasp-top-10-proactive-controls-2018.readthedocs.io/en/latest/c5-validate-all-inputs.html",
            "https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/07-Input_Validation_Testing/",
            "https://cheatsheetseries.owasp.org/cheatsheets/Mass_Assignment_Cheat_Sheet.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html"
        ]
    },
    {
        "category": "Validation, Sanitization and Encoding",
        "sub_category": "Input Validation",
        "id": "ASVS-5.1.5",
        "description": "Verify that URL redirects and forwards only allow destinations which appear on an allow list, or show a warning when redirecting to potentially untrusted content.",
        "cwe_ids": [
            601
        ],
        "nist": [],
        "feature_name": "Whitelist redirected/forwarded URLs",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": [
            "https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/11-Client_Side_Testing/04-Testing_for_Client_Side_URL_Redirect.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Mass_Assignment_Cheat_Sheet.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html"
        ]
    },
    {
        "category": "Validation, Sanitization and Encoding",
        "sub_category": "Sanitization and Sandboxing",
        "id": "ASVS-5.2.1",
        "description": "Verify that all untrusted HTML input from WYSIWYG editors or similar is properly sanitized with an HTML sanitizer library or framework feature.",
        "cwe_ids": [
            116
        ],
        "nist": [],
        "feature_name": "Sanitize untrusted HTML input",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": [
            "https://owasp-top-10-proactive-controls-2018.readthedocs.io/en/latest/c5-validate-all-inputs.html",
            "https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/11-Client_Side_Testing/03-Testing_for_HTML_Injection.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/DOM_based_XSS_Prevention_Cheat_Sheet.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html"
        ]
    },
    {
        "category": "Validation, Sanitization and Encoding",
        "sub_category": "Sanitization and Sandboxing",
        "id": "ASVS-5.2.2",
        "description": "Verify that unstructured data is sanitized to enforce safety measures such as allowed characters and length.",
        "cwe_ids": [
            138
        ],
        "nist": [],
        "feature_name": "Sanitize unstructured data",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": [
            "https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/07-Input_Validation_Testing/",
            "https://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/DOM_based_XSS_Prevention_Cheat_Sheet.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html"
        ]
    },
    {
        "category": "Validation, Sanitization and Encoding",
        "sub_category": "Sanitization and Sandboxing",
        "id": "ASVS-5.2.3",
        "description": "Verify that the application sanitizes user input before passing to mail systems to protect against SMTP or IMAP injection.",
        "cwe_ids": [
            147
        ],
        "nist": [],
        "feature_name": "Sanitize user input before passing content to mail systems (SMTP/IMAP injection)",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": [
            "https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/07-Input_Validation_Testing/10-Testing_for_IMAP_SMTP_Injection.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/DOM_based_XSS_Prevention_Cheat_Sheet.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html"
        ]
    },
    {
        "category": "Validation, Sanitization and Encoding",
        "sub_category": "Sanitization and Sandboxing",
        "id": "ASVS-5.2.4",
        "description": "Verify that the application avoids the use of eval() or other dynamic code execution features. Where there is no alternative, any user input being included must be sanitized or sandboxed before being executed.",
        "cwe_ids": [
            95
        ],
        "nist": [],
        "feature_name": "Do not use eval or dynamic code execution functions",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": [
            "https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/11-Client_Side_Testing/02-Testing_for_JavaScript_Execution.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/DOM_based_XSS_Prevention_Cheat_Sheet.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html"
        ]
    },
    {
        "category": "Validation, Sanitization and Encoding",
        "sub_category": "Sanitization and Sandboxing",
        "id": "ASVS-5.2.5",
        "description": "Verify that the application protects against template injection attacks by ensuring that any user input being included is sanitized or sandboxed.",
        "cwe_ids": [
            94
        ],
        "nist": [],
        "feature_name": "Sanitize/sandbox user input where template-injection is a threat",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": [
            "https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/07-Input_Validation_Testing/18-Testing_for_Server_Side_Template_Injection.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/DOM_based_XSS_Prevention_Cheat_Sheet.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html"
        ]
    },
    {
        "category": "Validation, Sanitization and Encoding",
        "sub_category": "Sanitization and Sandboxing",
        "id": "ASVS-5.2.6",
        "description": "Verify that the application protects against SSRF attacks, by validating or sanitizing untrusted data or HTTP file metadata, such as filenames and URL input fields, and uses allow lists of protocols, domains, paths and ports.",
        "cwe_ids": [
            918
        ],
        "nist": [],
        "feature_name": "(SSRF) When depending on internal server input, use validation sanitization and whitelisting",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": [
            "https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/07-Input_Validation_Testing/11-Testing_for_Code_Injection.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/DOM_based_XSS_Prevention_Cheat_Sheet.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html"
        ]
    },
    {
        "category": "Validation, Sanitization and Encoding",
        "sub_category": "Sanitization and Sandboxing",
        "id": "ASVS-5.2.7",
        "description": "Verify that the application sanitizes, disables, or sandboxes user-supplied Scalable Vector Graphics (SVG) scriptable content, especially as they relate to XSS resulting from inline scripts, and foreignObject.",
        "cwe_ids": [
            159
        ],
        "nist": [],
        "feature_name": "Sanitize, disable, or sandbox untrusted SVG scriptable content",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": [
            "https://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/DOM_based_XSS_Prevention_Cheat_Sheet.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html"
        ]
    },
    {
        "category": "Validation, Sanitization and Encoding",
        "sub_category": "Sanitization and Sandboxing",
        "id": "ASVS-5.2.8",
        "description": "Verify that the application sanitizes, disables, or sandboxes user-supplied scriptable or expression template language content, such as Markdown, CSS or XSL stylesheets, BBCode, or similar.",
        "cwe_ids": [
            94
        ],
        "nist": [],
        "feature_name": "Sanitize, disable, or sandbox untrusted scriptable or template language content",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": [
            "https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/11-Client_Side_Testing/05-Testing_for_CSS_Injection.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/DOM_based_XSS_Prevention_Cheat_Sheet.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html"
        ]
    },
    {
        "category": "Validation, Sanitization and Encoding",
        "sub_category": "Output Encoding and Injection Prevention",
        "id": "ASVS-5.3.1",
        "description": "Verify that output encoding is relevant for the interpreter and context required. For example, use encoders specifically for HTML values, HTML attributes, JavaScript, URL parameters, HTTP headers, SMTP, and others as the context requires, especially from untrusted inputs (e.g. names with Unicode or apostrophes, such as \u306d\u3053 or O'Hara).",
        "cwe_ids": [
            116
        ],
        "nist": [],
        "feature_name": "Force output encoding for specific interpreter's context",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": [
            "https://owasp-top-10-proactive-controls-2018.readthedocs.io/en/latest/c4-encode-escape-data.html",
            "https://owasp.org/www-project-web-security-testing-guide/v41/6-Appendix/D-Encoded_Injection.html"
        ]
    },
    {
        "category": "Validation, Sanitization and Encoding",
        "sub_category": "Output Encoding and Injection Prevention",
        "id": "ASVS-5.3.2",
        "description": "Verify that output encoding preserves the user's chosen character set and locale, such that any Unicode character point is valid and safely handled.",
        "cwe_ids": [
            176
        ],
        "nist": [],
        "feature_name": "Encode output while preserving user input formatting",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": [
            "https://owasp-top-10-proactive-controls-2018.readthedocs.io/en/latest/c4-encode-escape-data.html",
            "https://owasp.org/www-project-web-security-testing-guide/v41/6-Appendix/D-Encoded_Injection.html"
        ]
    },
    {
        "category": "Validation, Sanitization and Encoding",
        "sub_category": "Output Encoding and Injection Prevention",
        "id": "ASVS-5.3.3",
        "description": "Verify that context-aware, preferably automated - or at worst, manual - output escaping protects against reflected, stored, and DOM based XSS.",
        "cwe_ids": [
            79
        ],
        "nist": [],
        "feature_name": "Escape output against XSS",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": [
            "https://owasp-top-10-proactive-controls-2018.readthedocs.io/en/latest/c4-encode-escape-data.html",
            "https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/07-Input_Validation_Testing/01-Testing_for_Reflected_Cross_Site_Scripting.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"
        ]
    },
    {
        "category": "Validation, Sanitization and Encoding",
        "sub_category": "Output Encoding and Injection Prevention",
        "id": "ASVS-5.3.4",
        "description": "Verify that data selection or database queries (e.g. SQL, HQL, ORM, NoSQL) use parameterized queries, ORMs, entity frameworks, or are otherwise protected from database injection attacks.",
        "cwe_ids": [
            89
        ],
        "nist": [],
        "feature_name": "Lock/precompile queries (parameterization) to avoid injection attacks",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": [
            "https://owasp-top-10-proactive-controls-2018.readthedocs.io/en/latest/c3-secure-database-access.html",
            "https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/07-Input_Validation_Testing/05-Testing_for_SQL_Injection.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Query_Parameterization_Cheat_Sheet.html"
        ]
    },
    {
        "category": "Validation, Sanitization and Encoding",
        "sub_category": "Output Encoding and Injection Prevention",
        "id": "ASVS-5.3.5",
        "description": "Verify that where parameterized or safer mechanisms are not present, context-specific output encoding is used to protect against injection attacks, such as the use of SQL escaping to protect against SQL injection.",
        "cwe_ids": [
            89
        ],
        "nist": [],
        "feature_name": "Encode output context-specifically",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": [
            "https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/07-Input_Validation_Testing/05-Testing_for_SQL_Injection.html"
        ]
    },
    {
        "category": "Validation, Sanitization and Encoding",
        "sub_category": "Output Encoding and Injection Prevention",
        "id": "ASVS-5.3.6",
        "description": "Verify that the application protects against JSON injection attacks, JSON eval attacks, and JavaScript expression evaluation.",
        "cwe_ids": [
            830
        ],
        "nist": [],
        "feature_name": "Protect against JS or JSON injection attacks",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": [
            "https://owasp-top-10-proactive-controls-2018.readthedocs.io/en/latest/c4-encode-escape-data.html",
            "https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/11-Client_Side_Testing/01-Testing_for_DOM-based_Cross_Site_Scripting.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Injection_Prevention_Cheat_Sheet.html"
        ]
    },
    {
        "category": "Validation, Sanitization and Encoding",
        "sub_category": "Output Encoding and Injection Prevention",
        "id": "ASVS-5.3.7",
        "description": "Verify that the application protects against LDAP injection vulnerabilities, or that specific security controls to prevent LDAP injection have been implemented.",
        "cwe_ids": [
            90
        ],
        "nist": [],
        "feature_name": "Protect against LDAP injection",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": [
            "https://owasp-top-10-proactive-controls-2018.readthedocs.io/en/latest/c4-encode-escape-data.html",
            "https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/07-Input_Validation_Testing/06-Testing_for_LDAP_Injection.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/LDAP_Injection_Prevention_Cheat_Sheet.html"
        ]
    },
    {
        "category": "Validation, Sanitization and Encoding",
        "sub_category": "Output Encoding and Injection Prevention",
        "id": "ASVS-5.3.8",
        "description": "Verify that the application protects against OS command injection and that operating system calls use parameterized OS queries or use contextual command line output encoding.",
        "cwe_ids": [
            78
        ],
        "nist": [],
        "feature_name": "Protect against OS command injection attack",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": [
            "https://owasp-top-10-proactive-controls-2018.readthedocs.io/en/latest/c4-encode-escape-data.html",
            "https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/07-Input_Validation_Testing/12-Testing_for_Command_Injection.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/OS_Command_Injection_Defense_Cheat_Sheet.html"
        ]
    },
    {
        "category": "Validation, Sanitization and Encoding",
        "sub_category": "Output Encoding and Injection Prevention",
        "id": "ASVS-5.3.9",
        "description": "Verify that the application protects against Local File Inclusion (LFI) or Remote File Inclusion (RFI) attacks.",
        "cwe_ids": [
            829
        ],
        "nist": [],
        "feature_name": "Protect against LFI / RFI",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": [
            "https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/07-Input_Validation_Testing/11-Testing_for_Code_Injection.html"
        ]
    },
    {
        "category": "Validation, Sanitization and Encoding",
        "sub_category": "Output Encoding and Injection Prevention",
        "id": "ASVS-5.3.10",
        "description": "Verify that the application protects against XPath injection or XML injection attacks.",
        "cwe_ids": [
            643
        ],
        "nist": [],
        "feature_name": "Protect against XML/XPath injection",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": [
            "https://owasp-top-10-proactive-controls-2018.readthedocs.io/en/latest/c4-encode-escape-data.html",
            "https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/07-Input_Validation_Testing/07-Testing_for_XML_Injection.html; https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/07-Input_Validation_Testing/09-Testing_for_XPath_Injection.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/XML_Security_Cheat_Sheet.html"
        ]
    },
    {
        "category": "Validation, Sanitization and Encoding",
        "sub_category": "Memory, String, and Unmanaged Code",
        "id": "ASVS-5.4.1",
        "description": "Verify that the application uses memory-safe string, safer memory copy and pointer arithmetic to detect or prevent stack, buffer, or heap overflows.",
        "cwe_ids": [
            120
        ],
        "nist": [],
        "feature_name": "Use memory-safe functions exclusively",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": [
            "https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/07-Input_Validation_Testing/13-Testing_for_Buffer_Overflow.html"
        ]
    },
    {
        "category": "Validation, Sanitization and Encoding",
        "sub_category": "Memory, String, and Unmanaged Code",
        "id": "ASVS-5.4.2",
        "description": "Verify that format strings do not take potentially hostile input, and are constant.",
        "cwe_ids": [
            134
        ],
        "nist": [],
        "feature_name": "Force format strings as constants",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": []
    },
    {
        "category": "Validation, Sanitization and Encoding",
        "sub_category": "Memory, String, and Unmanaged Code",
        "id": "ASVS-5.4.3",
        "description": "Verify that sign, range, and input validation techniques are used to prevent integer overflows.",
        "cwe_ids": [
            190
        ],
        "nist": [],
        "feature_name": "Check boundaries against integer overflow weaknesses",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": []
    },
    {
        "category": "Validation, Sanitization and Encoding",
        "sub_category": "Deserialization Prevention",
        "id": "ASVS-5.5.1",
        "description": "Verify that serialized objects use integrity checks or are encrypted to prevent hostile object creation or data tampering.",
        "cwe_ids": [
            502
        ],
        "nist": [],
        "feature_name": "Secure serialized objects (e.g. integrity checks)",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": [
            "https://owasp-top-10-proactive-controls-2018.readthedocs.io/en/latest/c5-validate-all-inputs.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/XML_Security_Cheat_Sheet.html"
        ]
    },
    {
        "category": "Validation, Sanitization and Encoding",
        "sub_category": "Deserialization Prevention",
        "id": "ASVS-5.5.2",
        "description": "Verify that the application correctly restricts XML parsers to only use the most restrictive configuration possible and to ensure that unsafe features such as resolving external entities are disabled to prevent XML eXternal Entity (XXE) attacks.",
        "cwe_ids": [
            611
        ],
        "nist": [],
        "feature_name": "Restrict XML parsing (against XXE)",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [
            "Configuration"
        ],
        "references": [
            "https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/07-Input_Validation_Testing/07-Testing_for_XML_Injection.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/XML_Security_Cheat_Sheet.html"
        ]
    },
    {
        "category": "Validation, Sanitization and Encoding",
        "sub_category": "Deserialization Prevention",
        "id": "ASVS-5.5.3",
        "description": "Verify that deserialization of untrusted data is avoided or is protected in both custom code and third-party libraries (such as JSON, XML and YAML parsers).",
        "cwe_ids": [
            502
        ],
        "nist": [],
        "feature_name": "Avoid deserialization logic",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": [
            "https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/XML_Security_Cheat_Sheet.html"
        ]
    },
    {
        "category": "Validation, Sanitization and Encoding",
        "sub_category": "Deserialization Prevention",
        "id": "ASVS-5.5.4",
        "description": "Verify that when parsing JSON in browsers or JavaScript-based backends, JSON.parse is used to parse the JSON document. Do not use eval() to parse JSON.",
        "cwe_ids": [
            95
        ],
        "nist": [],
        "feature_name": "Parse JSON safely",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": [
            "https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/11-Client_Side_Testing/02-Testing_for_JavaScript_Execution.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/XML_Security_Cheat_Sheet.html"
        ]
    },
    {
        "category": "Architecture, Design and Threat Modeling",
        "sub_category": "Secure Software Development Lifecycle",
        "id": "ASVS-1.1.1",
        "description": "Verify the use of a secure software development lifecycle that addresses security in all stages of development.",
        "cwe_ids": [],
        "nist": [],
        "feature_name": "Define security steps in every SDLC stage",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": [
            "https://owasp-top-10-proactive-controls-2018.readthedocs.io/en/latest/c1-security-requirements.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Threat_Modeling_Cheat_Sheet.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Abuse_Case_Cheat_Sheet.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Attack_Surface_Analysis_Cheat_Sheet.html"
        ]
    },
    {
        "category": "Architecture, Design and Threat Modeling",
        "sub_category": "Secure Software Development Lifecycle",
        "id": "ASVS-1.1.2",
        "description": "Verify the use of threat modeling for every design change or sprint planning to identify threats, plan for countermeasures, facilitate appropriate risk responses, and guide security testing.",
        "cwe_ids": [
            1053
        ],
        "nist": [],
        "feature_name": "Threat model every design change or sprint",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [
            "Architecture"
        ],
        "references": [
            "https://cheatsheetseries.owasp.org/cheatsheets/Threat_Modeling_Cheat_Sheet.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Abuse_Case_Cheat_Sheet.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Attack_Surface_Analysis_Cheat_Sheet.html"
        ]
    },
    {
        "category": "Architecture, Design and Threat Modeling",
        "sub_category": "Secure Software Development Lifecycle",
        "id": "ASVS-1.1.3",
        "description": "Verify that all user stories and features contain functional security constraints, such as \"As a user, I should be able to view and edit my profile. I should not be able to view or edit anyone else's profile\"",
        "cwe_ids": [
            1110
        ],
        "nist": [],
        "feature_name": "Constrain functional features based on user stories",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": [
            "https://cheatsheetseries.owasp.org/cheatsheets/Threat_Modeling_Cheat_Sheet.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Abuse_Case_Cheat_Sheet.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Attack_Surface_Analysis_Cheat_Sheet.html"
        ]
    },
    {
        "category": "Architecture, Design and Threat Modeling",
        "sub_category": "Secure Software Development Lifecycle",
        "id": "ASVS-1.1.4",
        "description": "Verify documentation and justification of all the application's trust boundaries, components, and significant data flows.",
        "cwe_ids": [
            1059
        ],
        "nist": [],
        "feature_name": "Document all trust boundaries and significant data flows",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [
            "Architecture"
        ],
        "references": [
            "https://cheatsheetseries.owasp.org/cheatsheets/Threat_Modeling_Cheat_Sheet.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Abuse_Case_Cheat_Sheet.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Attack_Surface_Analysis_Cheat_Sheet.html"
        ]
    },
    {
        "category": "Architecture, Design and Threat Modeling",
        "sub_category": "Secure Software Development Lifecycle",
        "id": "ASVS-1.1.5",
        "description": "Verify definition and security analysis of the application's high-level architecture and all connected remote services.",
        "cwe_ids": [
            1059
        ],
        "nist": [],
        "feature_name": "Define High-level architecture and perform security analysis on it",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [
            "Architecture"
        ],
        "references": [
            "https://owasp-top-10-proactive-controls-2018.readthedocs.io/en/latest/c1-security-requirements.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Threat_Modeling_Cheat_Sheet.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Abuse_Case_Cheat_Sheet.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Attack_Surface_Analysis_Cheat_Sheet.html"
        ]
    },
    {
        "category": "Architecture, Design and Threat Modeling",
        "sub_category": "Secure Software Development Lifecycle",
        "id": "ASVS-1.1.6",
        "description": "Verify implementation of centralized, simple (economy of design), vetted, secure, and reusable security controls to avoid duplicate, missing, ineffective, or insecure controls.",
        "cwe_ids": [
            637
        ],
        "nist": [],
        "feature_name": "Centralize security controls",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [
            "Architecture"
        ],
        "references": [
            "https://owasp-top-10-proactive-controls-2018.readthedocs.io/en/latest/c10-handle-errors-exceptions.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Threat_Modeling_Cheat_Sheet.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Abuse_Case_Cheat_Sheet.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Attack_Surface_Analysis_Cheat_Sheet.html"
        ]
    },
    {
        "category": "Architecture, Design and Threat Modeling",
        "sub_category": "Secure Software Development Lifecycle",
        "id": "ASVS-1.1.7",
        "description": "Verify availability of a secure coding checklist, security requirements, guideline, or policy to all developers and testers.",
        "cwe_ids": [
            637
        ],
        "nist": [],
        "feature_name": "Make (centrally) available secure coding resources for programmers",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": [
            "https://cheatsheetseries.owasp.org/cheatsheets/Threat_Modeling_Cheat_Sheet.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Abuse_Case_Cheat_Sheet.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Attack_Surface_Analysis_Cheat_Sheet.html"
        ]
    },
    {
        "category": "Architecture, Design and Threat Modeling",
        "sub_category": "Authentication Architecture",
        "id": "ASVS-1.2.1",
        "description": "Verify the use of unique or special low-privilege operating system accounts for all application components, services, and servers.",
        "cwe_ids": [
            250
        ],
        "nist": [],
        "feature_name": "Use least privilege OS accounts for system (components)",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": [
            "https://owasp-top-10-proactive-controls-2018.readthedocs.io/en/latest/c3-secure-database-access.html"
        ]
    },
    {
        "category": "Architecture, Design and Threat Modeling",
        "sub_category": "Authentication Architecture",
        "id": "ASVS-1.2.2",
        "description": "Verify that communications between application components, including APIs, middleware and data layers, are authenticated. Components should have the least necessary privileges needed.",
        "cwe_ids": [
            306
        ],
        "nist": [],
        "feature_name": "Mutually authenticate application components. Minimize privileges",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [
            "Architecture"
        ],
        "references": [
            "https://owasp-top-10-proactive-controls-2018.readthedocs.io/en/latest/c3-secure-database-access.html"
        ]
    },
    {
        "category": "Architecture, Design and Threat Modeling",
        "sub_category": "Authentication Architecture",
        "id": "ASVS-1.2.3",
        "description": "Verify that the application uses a single vetted authentication mechanism that is known to be secure, can be extended to include strong authentication, and has sufficient logging and monitoring to detect account abuse or breaches.",
        "cwe_ids": [
            306
        ],
        "nist": [],
        "feature_name": "Use centralized authentication mechanism",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [
            "Architecture"
        ],
        "references": []
    },
    {
        "category": "Architecture, Design and Threat Modeling",
        "sub_category": "Authentication Architecture",
        "id": "ASVS-1.2.4",
        "description": "Verify that all authentication pathways and identity management APIs implement consistent authentication security control strength, such that there are no weaker alternatives per the risk of the application.",
        "cwe_ids": [
            306
        ],
        "nist": [],
        "feature_name": "Consistently apply authentication strength",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": []
    },
    {
        "category": "Architecture, Design and Threat Modeling",
        "sub_category": "Access Control Architecture",
        "id": "ASVS-1.4.1",
        "description": "Verify that trusted enforcement points, such as access control gateways, servers, and serverless functions, enforce access controls. Never enforce access controls on the client.",
        "cwe_ids": [
            602
        ],
        "nist": [],
        "feature_name": "Enforce access control on trusted parts/serverside",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": [
            "https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html"
        ]
    },
    {
        "category": "Architecture, Design and Threat Modeling",
        "sub_category": "Access Control Architecture",
        "id": "ASVS-1.4.4",
        "description": "Verify the application uses a single and well-vetted access control mechanism for accessing protected data and resources. All requests must pass through this single mechanism to avoid copy and paste or insecure alternative paths.",
        "cwe_ids": [
            284
        ],
        "nist": [],
        "feature_name": "Use a centralized access control mechanism",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [
            "Architecture"
        ],
        "references": [
            "https://owasp-top-10-proactive-controls-2018.readthedocs.io/en/latest/c7-enforce-access-controls.html"
        ]
    },
    {
        "category": "Architecture, Design and Threat Modeling",
        "sub_category": "Access Control Architecture",
        "id": "ASVS-1.4.5",
        "description": "Verify that attribute or feature-based access control is used whereby the code checks the user's authorization for a feature/data item rather than just their role. Permissions should still be allocated using roles.",
        "cwe_ids": [
            275
        ],
        "nist": [],
        "feature_name": "Use ABAC/FBAC on data/feature level, even when using RBAC for permissions",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": [
            "https://owasp-top-10-proactive-controls-2018.readthedocs.io/en/latest/c7-enforce-access-controls.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html"
        ]
    },
    {
        "category": "Architecture, Design and Threat Modeling",
        "sub_category": "Input and Output Architecture",
        "id": "ASVS-1.5.1",
        "description": "Verify that input and output requirements clearly define how to handle and process data based on type, content, and applicable laws, regulations, and other policy compliance.",
        "cwe_ids": [
            1029
        ],
        "nist": [],
        "feature_name": "Clear policy compliant I/O requirements",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": [
            "https://cheatsheetseries.owasp.org/cheatsheets/Abuse_Case_Cheat_Sheet.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html"
        ]
    },
    {
        "category": "Architecture, Design and Threat Modeling",
        "sub_category": "Input and Output Architecture",
        "id": "ASVS-1.5.2",
        "description": "Verify that serialization is not used when communicating with untrusted clients. If this is not possible, ensure that adequate integrity controls (and possibly encryption if sensitive data is sent) are enforced to prevent deserialization attacks including object injection.",
        "cwe_ids": [
            502
        ],
        "nist": [],
        "feature_name": "Block serialization of content from untrusted clients",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": [
            "https://cheatsheetseries.owasp.org/cheatsheets/Abuse_Case_Cheat_Sheet.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html"
        ]
    },
    {
        "category": "Architecture, Design and Threat Modeling",
        "sub_category": "Input and Output Architecture",
        "id": "ASVS-1.5.3",
        "description": "Verify that input validation is enforced on a trusted service layer.",
        "cwe_ids": [
            602
        ],
        "nist": [],
        "feature_name": "Enforce input validation on a trusted service layer",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [
            "Architecture"
        ],
        "references": [
            "https://owasp-top-10-proactive-controls-2018.readthedocs.io/en/latest/c5-validate-all-inputs.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Abuse_Case_Cheat_Sheet.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html"
        ]
    },
    {
        "category": "Architecture, Design and Threat Modeling",
        "sub_category": "Input and Output Architecture",
        "id": "ASVS-1.5.4",
        "description": "Verify that output encoding occurs close to or by the interpreter for which it is intended.",
        "cwe_ids": [
            116
        ],
        "nist": [],
        "feature_name": "Encode output near the consuming interpreter",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": [
            "https://owasp-top-10-proactive-controls-2018.readthedocs.io/en/latest/c4-encode-escape-data.html"
        ]
    },
    {
        "category": "Architecture, Design and Threat Modeling",
        "sub_category": "Cryptographic Architecture",
        "id": "ASVS-1.6.1",
        "description": "Verify that there is an explicit policy for management of cryptographic keys and that a cryptographic key lifecycle follows a key management standard such as NIST SP 800-57.",
        "cwe_ids": [
            320
        ],
        "nist": [],
        "feature_name": "Document explicit key/secret management",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": [
            "https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Key_Management_Cheat_Sheet.html"
        ]
    },
    {
        "category": "Architecture, Design and Threat Modeling",
        "sub_category": "Cryptographic Architecture",
        "id": "ASVS-1.6.2",
        "description": "Verify that consumers of cryptographic services protect key material and other secrets by using key vaults or API based alternatives.",
        "cwe_ids": [
            320
        ],
        "nist": [],
        "feature_name": "Use key vaults",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": [
            "https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Key_Management_Cheat_Sheet.html"
        ]
    },
    {
        "category": "Architecture, Design and Threat Modeling",
        "sub_category": "Cryptographic Architecture",
        "id": "ASVS-1.6.3",
        "description": "Verify that all keys and passwords are replaceable and are part of a well-defined process to re-encrypt sensitive data.",
        "cwe_ids": [
            320
        ],
        "nist": [],
        "feature_name": "Ensure keys and passwords are replaceable",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": [
            "https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Key_Management_Cheat_Sheet.html"
        ]
    },
    {
        "category": "Architecture, Design and Threat Modeling",
        "sub_category": "Cryptographic Architecture",
        "id": "ASVS-1.6.4",
        "description": "Verify that the architecture treats client-side secrets--such as symmetric keys, passwords, or API tokens--as insecure and never uses them to protect or access sensitive data.",
        "cwe_ids": [
            320
        ],
        "nist": [],
        "feature_name": "Treat client-secrets as insecure",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": []
    },
    {
        "category": "Architecture, Design and Threat Modeling",
        "sub_category": "Errors, Logging and Auditing Architecture",
        "id": "ASVS-1.7.1",
        "description": "Verify that a common logging format and approach is used across the system.",
        "cwe_ids": [
            1009
        ],
        "nist": [],
        "feature_name": "Log in consistent format across system",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [
            "Architecture"
        ],
        "references": [
            "https://owasp-top-10-proactive-controls-2018.readthedocs.io/en/latest/c9-implement-security-logging-monitoring.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Logging_Cheat_Sheet.html"
        ]
    },
    {
        "category": "Architecture, Design and Threat Modeling",
        "sub_category": "Errors, Logging and Auditing Architecture",
        "id": "ASVS-1.7.2",
        "description": "Verify that logs are securely transmitted to a preferably remote system for analysis, detection, alerting, and escalation.",
        "cwe_ids": [],
        "nist": [],
        "feature_name": "Securely transfer logs (remotely)",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": [
            "https://owasp-top-10-proactive-controls-2018.readthedocs.io/en/latest/c9-implement-security-logging-monitoring.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Logging_Cheat_Sheet.html"
        ]
    },
    {
        "category": "Architecture, Design and Threat Modeling",
        "sub_category": "Data Protection and Privacy Architecture",
        "id": "ASVS-1.8.1",
        "description": "Verify that all sensitive data is identified and classified into protection levels.",
        "cwe_ids": [],
        "nist": [],
        "feature_name": "Classify sensitive data in protection levels",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": [
            "https://cheatsheetseries.owasp.org/cheatsheets/Abuse_Case_Cheat_Sheet.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/User_Privacy_Protection_Cheat_Sheet.html"
        ]
    },
    {
        "category": "Architecture, Design and Threat Modeling",
        "sub_category": "Data Protection and Privacy Architecture",
        "id": "ASVS-1.8.2",
        "description": "Verify that all protection levels have an associated set of protection requirements, such as encryption requirements, integrity requirements, retention, privacy and other confidentiality requirements, and that these are applied in the architecture.",
        "cwe_ids": [],
        "nist": [],
        "feature_name": "Document requirements for (data) protection levels",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": [
            "https://cheatsheetseries.owasp.org/cheatsheets/Abuse_Case_Cheat_Sheet.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/User_Privacy_Protection_Cheat_Sheet.html"
        ]
    },
    {
        "category": "Architecture, Design and Threat Modeling",
        "sub_category": "Communications Architecture",
        "id": "ASVS-1.9.1",
        "description": "Verify the application encrypts communications between components, particularly when these components are in different containers, systems, sites, or cloud providers.",
        "cwe_ids": [
            319
        ],
        "nist": [],
        "feature_name": "Protect communication between application components",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": [
            "https://owasp-top-10-proactive-controls-2018.readthedocs.io/en/latest/c3-secure-database-access.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Transport_Layer_Protection_Cheat_Sheet.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/TLS_Cipher_String_Cheat_Sheet.html"
        ]
    },
    {
        "category": "Architecture, Design and Threat Modeling",
        "sub_category": "Communications Architecture",
        "id": "ASVS-1.9.2",
        "description": "Verify that application components verify the authenticity of each side in a communication link to prevent person-in-the-middle attacks. For example, application components should validate TLS certificates and chains.",
        "cwe_ids": [
            295
        ],
        "nist": [],
        "feature_name": "Mutually authenticate application components",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": [
            "https://cheatsheetseries.owasp.org/cheatsheets/Transport_Layer_Protection_Cheat_Sheet.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/TLS_Cipher_String_Cheat_Sheet.html"
        ]
    },
    {
        "category": "Architecture, Design and Threat Modeling",
        "sub_category": "Malicious Software Architecture",
        "id": "ASVS-1.10.1",
        "description": "Verify that a source code control system is in use, with procedures to ensure that check-ins are accompanied by issues or change tickets. The source code control system should have access control and identifiable users to allow traceability of any changes.",
        "cwe_ids": [
            284
        ],
        "nist": [],
        "feature_name": "Use proper source code control system",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": [
            "https://cheatsheetseries.owasp.org/cheatsheets/Third_Party_Javascript_Management_Cheat_Sheet.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Virtual_Patching_Cheat_Sheet.html"
        ]
    },
    {
        "category": "Architecture, Design and Threat Modeling",
        "sub_category": "Business Logic Architecture",
        "id": "ASVS-1.11.1",
        "description": "Verify the definition and documentation of all application components in terms of the business or security functions they provide.",
        "cwe_ids": [
            1059
        ],
        "nist": [],
        "feature_name": "Documentation of all components' business or security function",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": [
            "https://cheatsheetseries.owasp.org/cheatsheets/Abuse_Case_Cheat_Sheet.html"
        ]
    },
    {
        "category": "Architecture, Design and Threat Modeling",
        "sub_category": "Business Logic Architecture",
        "id": "ASVS-1.11.2",
        "description": "Verify that all high-value business logic flows, including authentication, session management and access control, do not share unsynchronized state.",
        "cwe_ids": [
            362
        ],
        "nist": [],
        "feature_name": "Do not share unsynchronized state on high-value logic flows",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": [
            "https://cheatsheetseries.owasp.org/cheatsheets/Abuse_Case_Cheat_Sheet.html"
        ]
    },
    {
        "category": "Architecture, Design and Threat Modeling",
        "sub_category": "Business Logic Architecture",
        "id": "ASVS-1.11.3",
        "description": "Verify that all high-value business logic flows, including authentication, session management and access control are thread safe and resistant to time-of-check and time-of-use race conditions.",
        "cwe_ids": [
            367
        ],
        "nist": [],
        "feature_name": "Ensure business flows' thread safety/resistance to race conditions",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": [
            "https://cheatsheetseries.owasp.org/cheatsheets/Abuse_Case_Cheat_Sheet.html"
        ]
    },
    {
        "category": "Architecture, Design and Threat Modeling",
        "sub_category": "Secure File Upload Architecture",
        "id": "ASVS-1.12.2",
        "description": "Verify that user-uploaded files - if required to be displayed or downloaded from the application - are served by either octet stream downloads, or from an unrelated domain, such as a cloud file storage bucket. Implement a suitable Content Security Policy (CSP) to reduce the risk from XSS vectors or other attacks from the uploaded file.",
        "cwe_ids": [
            646
        ],
        "nist": [],
        "feature_name": "Store and serve user-uploaded files such that they cannot execute/damage server or client",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [
            "Injection",
            "XSS"
        ],
        "references": []
    },
    {
        "category": "Architecture, Design and Threat Modeling",
        "sub_category": "Configuration Architecture",
        "id": "ASVS-1.14.1",
        "description": "Verify the segregation of components of differing trust levels through well-defined security controls, firewall rules, API gateways, reverse proxies, cloud-based security groups, or similar mechanisms.",
        "cwe_ids": [
            923
        ],
        "nist": [],
        "feature_name": "Segregate components of differing trust levels",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": []
    },
    {
        "category": "Architecture, Design and Threat Modeling",
        "sub_category": "Configuration Architecture",
        "id": "ASVS-1.14.2",
        "description": "Verify that binary signatures, trusted connections, and verified endpoints are used to deploy binaries to remote devices.",
        "cwe_ids": [
            494
        ],
        "nist": [],
        "feature_name": "Check binary integrity before deployment",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": []
    },
    {
        "category": "Architecture, Design and Threat Modeling",
        "sub_category": "Configuration Architecture",
        "id": "ASVS-1.14.3",
        "description": "Verify that the build pipeline warns of out-of-date or insecure components and takes appropriate actions.",
        "cwe_ids": [
            1104
        ],
        "nist": [],
        "feature_name": "Force pipeline to check outdated/insecure components",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": []
    },
    {
        "category": "Architecture, Design and Threat Modeling",
        "sub_category": "Configuration Architecture",
        "id": "ASVS-1.14.4",
        "description": "Verify that the build pipeline contains a build step to automatically build and verify the secure deployment of the application, particularly if the application infrastructure is software defined, such as cloud environment build scripts.",
        "cwe_ids": [],
        "nist": [],
        "feature_name": "Automate secure build and deployment, especially with SDI",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": []
    },
    {
        "category": "Architecture, Design and Threat Modeling",
        "sub_category": "Configuration Architecture",
        "id": "ASVS-1.14.5",
        "description": "Verify that application deployments adequately sandbox, containerize and/or isolate at the network level to delay and deter attackers from attacking other applications, especially when they are performing sensitive or dangerous actions such as deserialization.",
        "cwe_ids": [
            265
        ],
        "nist": [],
        "feature_name": "Sandbox, containerize and/or isolate applications at the network level",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [
            "Architecture"
        ],
        "references": [
            "https://owasp-top-10-proactive-controls-2018.readthedocs.io/en/latest/c5-validate-all-inputs.html"
        ]
    },
    {
        "category": "Architecture, Design and Threat Modeling",
        "sub_category": "Configuration Architecture",
        "id": "ASVS-1.14.6",
        "description": "Verify the application does not use unsupported, insecure, or deprecated client-side technologies such as NSAPI plugins, Flash, Shockwave, ActiveX, Silverlight, NACL, or client-side Java applets.",
        "cwe_ids": [
            477
        ],
        "nist": [],
        "feature_name": "Disallow unsupported/deprecated client-side technologies",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": []
    },
    {
        "category": "Error Handling and Logging",
        "sub_category": "Log Content",
        "id": "ASVS-7.1.1",
        "description": "Verify that the application does not log credentials or payment details. Session tokens should only be stored in logs in an irreversible, hashed form.",
        "cwe_ids": [
            532
        ],
        "nist": [],
        "feature_name": "Do not log credentials or payment details",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": [
            "https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/02-Test_Application_Platform_Configuration.html#log-review",
            "https://cheatsheetseries.owasp.org/cheatsheets/Logging_Cheat_Sheet.html"
        ]
    },
    {
        "category": "Error Handling and Logging",
        "sub_category": "Log Content",
        "id": "ASVS-7.1.2",
        "description": "Verify that the application does not log other sensitive data as defined under local privacy laws or relevant security policy.",
        "cwe_ids": [
            532
        ],
        "nist": [],
        "feature_name": "Log only non-sensitive data",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": [
            "https://owasp-top-10-proactive-controls-2018.readthedocs.io/en/latest/c9-implement-security-logging-monitoring.html",
            "https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/02-Test_Application_Platform_Configuration.html#log-review",
            "https://cheatsheetseries.owasp.org/cheatsheets/Logging_Cheat_Sheet.html"
        ]
    },
    {
        "category": "Error Handling and Logging",
        "sub_category": "Log Content",
        "id": "ASVS-7.1.3",
        "description": "Verify that the application logs security relevant events including successful and failed authentication events, access control failures, deserialization failures and input validation failures.",
        "cwe_ids": [
            778
        ],
        "nist": [],
        "feature_name": "Log all security relevant events",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": [
            "https://cheatsheetseries.owasp.org/cheatsheets/Logging_Cheat_Sheet.html"
        ]
    },
    {
        "category": "Error Handling and Logging",
        "sub_category": "Log Content",
        "id": "ASVS-7.1.4",
        "description": "Verify that each log event includes necessary information that would allow for a detailed investigation of the timeline when an event happens.",
        "cwe_ids": [
            778
        ],
        "nist": [],
        "feature_name": "Log events sufficiently to recreate their order",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": [
            "https://owasp-top-10-proactive-controls-2018.readthedocs.io/en/latest/c9-implement-security-logging-monitoring.html",
            "https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/02-Test_Application_Platform_Configuration.html#log-review",
            "https://cheatsheetseries.owasp.org/cheatsheets/Logging_Cheat_Sheet.html"
        ]
    },
    {
        "category": "Error Handling and Logging",
        "sub_category": "Log Processing",
        "id": "ASVS-7.2.1",
        "description": "Verify that all authentication decisions are logged, without storing sensitive session tokens or passwords. This should include requests with relevant metadata needed for security investigations.",
        "cwe_ids": [
            778
        ],
        "nist": [],
        "feature_name": "Log authentication decisions without exposing sensitive data",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": [
            "https://cheatsheetseries.owasp.org/cheatsheets/Logging_Cheat_Sheet.html"
        ]
    },
    {
        "category": "Error Handling and Logging",
        "sub_category": "Log Processing",
        "id": "ASVS-7.2.2",
        "description": "Verify that all access control decisions can be logged and all failed decisions are logged. This should include requests with relevant metadata needed for security investigations.",
        "cwe_ids": [
            285
        ],
        "nist": [],
        "feature_name": "Log access control decisions",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": [
            "https://cheatsheetseries.owasp.org/cheatsheets/Logging_Cheat_Sheet.html"
        ]
    },
    {
        "category": "Error Handling and Logging",
        "sub_category": "Log Protection",
        "id": "ASVS-7.3.1",
        "description": "Verify that all logging components appropriately encode data to prevent log injection.",
        "cwe_ids": [
            117
        ],
        "nist": [],
        "feature_name": "Encode user input before logging",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [
            "Injection"
        ],
        "references": [
            "https://owasp-top-10-proactive-controls-2018.readthedocs.io/en/latest/c9-implement-security-logging-monitoring.html",
            "https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/10-Business_Logic_Testing/03-Test_Integrity_Checks.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Logging_Cheat_Sheet.html"
        ]
    },
    {
        "category": "Error Handling and Logging",
        "sub_category": "Log Protection",
        "id": "ASVS-7.3.3",
        "description": "Verify that security logs are protected from unauthorized access and modification.",
        "cwe_ids": [
            200
        ],
        "nist": [],
        "feature_name": "Protect logs against unauthorized access",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": [
            "https://owasp-top-10-proactive-controls-2018.readthedocs.io/en/latest/c9-implement-security-logging-monitoring.html",
            "https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/05-Authorization_Testing/03-Testing_for_Privilege_Escalation.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Logging_Cheat_Sheet.htmlhttps://cheatsheetseries.owasp.org/cheatsheets/Logging_Cheat_Sheet.html"
        ]
    },
    {
        "category": "Error Handling and Logging",
        "sub_category": "Log Protection",
        "id": "ASVS-7.3.4",
        "description": "Verify that time sources are synchronized to the correct time and time zone. Strongly consider logging only in UTC if systems are global to assist with post-incident forensic analysis.",
        "cwe_ids": [],
        "nist": [],
        "feature_name": "Synchronize time zones for logs",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": [
            "https://owasp-top-10-proactive-controls-2018.readthedocs.io/en/latest/c9-implement-security-logging-monitoring.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Logging_Cheat_Sheet.htmlhttps://cheatsheetseries.owasp.org/cheatsheets/Logging_Cheat_Sheet.html"
        ]
    },
    {
        "category": "Error Handling and Logging",
        "sub_category": "Error Handling",
        "id": "ASVS-7.4.1",
        "description": "Verify that a generic message is shown when an unexpected or security sensitive error occurs, potentially with a unique ID which support personnel can use to investigate.",
        "cwe_ids": [
            210
        ],
        "nist": [],
        "feature_name": "Show generic message for security exceptions or unanticipated exceptions",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": [
            "https://owasp-top-10-proactive-controls-2018.readthedocs.io/en/latest/c10-handle-errors-exceptions.html",
            "https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/08-Testing_for_Error_Handling/02-Testing_for_Stack_Traces.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Error_Handling_Cheat_Sheet.html"
        ]
    },
    {
        "category": "Error Handling and Logging",
        "sub_category": "Error Handling",
        "id": "ASVS-7.4.2",
        "description": "Verify that exception handling (or a functional equivalent) is used across the codebase to account for expected and unexpected error conditions.",
        "cwe_ids": [
            544
        ],
        "nist": [],
        "feature_name": "Use exception handling uniformly",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": [
            "https://owasp-top-10-proactive-controls-2018.readthedocs.io/en/latest/c10-handle-errors-exceptions.html",
            "https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/08-Testing_for_Error_Handling/02-Testing_for_Stack_Traces.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Error_Handling_Cheat_Sheet.html"
        ]
    },
    {
        "category": "Error Handling and Logging",
        "sub_category": "Error Handling",
        "id": "ASVS-7.4.3",
        "description": "Verify that a \"last resort\" error handler is defined which will catch all unhandled exceptions.",
        "cwe_ids": [
            431
        ],
        "nist": [],
        "feature_name": "Use a standard last-resort error handler for unhandled errors",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": [
            "https://owasp-top-10-proactive-controls-2018.readthedocs.io/en/latest/c10-handle-errors-exceptions.html",
            "https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/08-Testing_for_Error_Handling/02-Testing_for_Stack_Traces.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Error_Handling_Cheat_Sheet.html"
        ]
    },
    {
        "category": "Malicious Code",
        "sub_category": "Code Integrity",
        "id": "ASVS-10.1.1",
        "description": "Verify that a code analysis tool is in use that can detect potentially malicious code, such as time functions, unsafe file operations and network connections.",
        "cwe_ids": [
            749
        ],
        "nist": [],
        "feature_name": "Use SAST for malicious content",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": [
            "https://cheatsheetseries.owasp.org/cheatsheets/Third_Party_Javascript_Management_Cheat_Sheet.html"
        ]
    },
    {
        "category": "Malicious Code",
        "sub_category": "Malicious Code Search",
        "id": "ASVS-10.2.1",
        "description": "Verify that the application source code and third party libraries do not contain unauthorized phone home or data collection capabilities. Where such functionality exists, obtain the user's permission for it to operate before collecting any data.",
        "cwe_ids": [
            359
        ],
        "nist": [],
        "feature_name": "Avoid unauthorized client data collection",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": []
    },
    {
        "category": "Malicious Code",
        "sub_category": "Malicious Code Search",
        "id": "ASVS-10.2.2",
        "description": "Verify that the application does not ask for unnecessary or excessive permissions to privacy related features or sensors, such as contacts, cameras, microphones, or location.",
        "cwe_ids": [
            272
        ],
        "nist": [],
        "feature_name": "Let application request minimal permissions",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": []
    },
    {
        "category": "Malicious Code",
        "sub_category": "Malicious Code Search",
        "id": "ASVS-10.2.3",
        "description": "Verify that the application source code and third party libraries do not contain back doors, such as hard-coded or additional undocumented accounts or keys, code obfuscation, undocumented binary blobs, rootkits, or anti-debugging, insecure debugging features, or otherwise out of date, insecure, or hidden functionality that could be used maliciously if discovered.",
        "cwe_ids": [
            507
        ],
        "nist": [],
        "feature_name": "Check source code and third party libraries to not contain backdoors",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": []
    },
    {
        "category": "Malicious Code",
        "sub_category": "Malicious Code Search",
        "id": "ASVS-10.2.4",
        "description": "Verify that the application source code and third party libraries do not contain time bombs by searching for date and time related functions.",
        "cwe_ids": [
            511
        ],
        "nist": [],
        "feature_name": "Check source code to not contain timebombs",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": []
    },
    {
        "category": "Malicious Code",
        "sub_category": "Malicious Code Search",
        "id": "ASVS-10.2.5",
        "description": "Verify that the application source code and third party libraries do not contain malicious code, such as salami attacks, logic bypasses, or logic bombs.",
        "cwe_ids": [
            511
        ],
        "nist": [],
        "feature_name": "Check source code to not contain malicious code",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": []
    },
    {
        "category": "Malicious Code",
        "sub_category": "Malicious Code Search",
        "id": "ASVS-10.2.6",
        "description": "Verify that the application source code and third party libraries do not contain Easter eggs or any other potentially unwanted functionality.",
        "cwe_ids": [
            507
        ],
        "nist": [],
        "feature_name": "Harden application by excluding unwanted functionality",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": []
    },
    {
        "category": "Malicious Code",
        "sub_category": "Application Integrity",
        "id": "ASVS-10.3.1",
        "description": "Verify that if the application has a client or server auto-update feature, updates should be obtained over secure channels and digitally signed. The update code must validate the digital signature of the update before installing or executing the update.",
        "cwe_ids": [
            16
        ],
        "nist": [],
        "feature_name": "Secure auto-updates over full stack",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": [
            "https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html"
        ]
    },
    {
        "category": "Malicious Code",
        "sub_category": "Application Integrity",
        "id": "ASVS-10.3.2",
        "description": "Verify that the application employs integrity protections, such as code signing or subresource integrity. The application must not load or execute code from untrusted sources, such as loading includes, modules, plugins, code, or libraries from untrusted sources or the Internet.",
        "cwe_ids": [
            353
        ],
        "nist": [],
        "feature_name": "Allow only trusted sources both build time and runtime; therefore perform integrity checks on all resources and code",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": [
            "https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html"
        ]
    },
    {
        "category": "Malicious Code",
        "sub_category": "Application Integrity",
        "id": "ASVS-10.3.3",
        "description": "Verify that the application has protection from subdomain takeovers if the application relies upon DNS entries or DNS subdomains, such as expired domain names, out of date DNS pointers or CNAMEs, expired projects at public source code repos, or transient cloud APIs, serverless functions, or storage buckets (*autogen-bucket-id*.cloud.example.com) or similar. Protections can include ensuring that DNS names used by applications are regularly checked for expiry or change.",
        "cwe_ids": [
            350
        ],
        "nist": [],
        "feature_name": "Ensure integrity of DNS entries and domains",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [
            "Secure name/address resolution service"
        ],
        "references": [
            "https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/10-Test_for_Subdomain_Takeover.html",
            "https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html"
        ]
    },
    {
        "category": "Data Protection",
        "sub_category": "General Data Protection",
        "id": "ASVS-8.1.1",
        "description": "Verify the application protects sensitive data from being cached in server components such as load balancers and application caches.",
        "cwe_ids": [
            524
        ],
        "nist": [],
        "feature_name": "Prevent caching of sensitive data in server components",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": []
    },
    {
        "category": "Data Protection",
        "sub_category": "General Data Protection",
        "id": "ASVS-8.1.2",
        "description": "Verify that all cached or temporary copies of sensitive data stored on the server are protected from unauthorized access or purged/invalidated after the authorized user accesses the sensitive data.",
        "cwe_ids": [
            524
        ],
        "nist": [],
        "feature_name": "Protect and clear cached sensitive data",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": []
    },
    {
        "category": "Data Protection",
        "sub_category": "General Data Protection",
        "id": "ASVS-8.1.3",
        "description": "Verify the application minimizes the number of parameters in a request, such as hidden fields, Ajax variables, cookies and header values.",
        "cwe_ids": [
            233
        ],
        "nist": [],
        "feature_name": "Minimize the number of parameters in a request",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": []
    },
    {
        "category": "Data Protection",
        "sub_category": "General Data Protection",
        "id": "ASVS-8.1.4",
        "description": "Verify the application can detect and alert on abnormal numbers of requests, such as by IP, user, total per hour or day, or whatever makes sense for the application.",
        "cwe_ids": [
            770
        ],
        "nist": [],
        "feature_name": "Monitor expectation of usage intensity (e.g. number of requests)",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [
            "DOS"
        ],
        "references": []
    },
    {
        "category": "Data Protection",
        "sub_category": "General Data Protection",
        "id": "ASVS-8.1.5",
        "description": "Verify that regular backups of important data are performed and that test restoration of data is performed.",
        "cwe_ids": [
            19
        ],
        "nist": [],
        "feature_name": "Perform regular backups of important data and test restoration",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": []
    },
    {
        "category": "Data Protection",
        "sub_category": "General Data Protection",
        "id": "ASVS-8.1.6",
        "description": "Verify that backups are stored securely to prevent data from being stolen or corrupted.",
        "cwe_ids": [
            19
        ],
        "nist": [],
        "feature_name": "Store backups securely",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": []
    },
    {
        "category": "Data Protection",
        "sub_category": "Client-side Data Protection",
        "id": "ASVS-8.2.1",
        "description": "Verify the application sets sufficient anti-caching headers so that sensitive data is not cached in modern browsers.",
        "cwe_ids": [
            525
        ],
        "nist": [],
        "feature_name": "Set sufficient anti-caching headers",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": [
            "https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses.html"
        ]
    },
    {
        "category": "Data Protection",
        "sub_category": "Client-side Data Protection",
        "id": "ASVS-8.2.2",
        "description": "Verify that data stored in browser storage (such as localStorage, sessionStorage, IndexedDB, or cookies) does not contain sensitive data.",
        "cwe_ids": [
            922
        ],
        "nist": [],
        "feature_name": "Do not store sensitive data on client (browser) storage",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": [
            "https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/11-Client_Side_Testing/12-Testing_Browser_Storage.html"
        ]
    },
    {
        "category": "Data Protection",
        "sub_category": "Client-side Data Protection",
        "id": "ASVS-8.2.3",
        "description": "Verify that authenticated data is cleared from client storage, such as the browser DOM, after the client or session is terminated.",
        "cwe_ids": [
            922
        ],
        "nist": [],
        "feature_name": "Clear authentication data from client storage",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": [
            "https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/11-Client_Side_Testing/12-Testing_Browser_Storage.html"
        ]
    },
    {
        "category": "Data Protection",
        "sub_category": "Sensitive Private Data",
        "id": "ASVS-8.3.1",
        "description": "Verify that sensitive data is sent to the server in the HTTP message body or headers, and that query string parameters from any HTTP verb do not contain sensitive data.",
        "cwe_ids": [
            319
        ],
        "nist": [],
        "feature_name": "Do not expose data through HTTP verb",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [
            "Configuration"
        ],
        "references": [
            "https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/03-Testing_for_Sensitive_Information_Sent_via_Unencrypted_Channels.html"
        ]
    },
    {
        "category": "Data Protection",
        "sub_category": "Sensitive Private Data",
        "id": "ASVS-8.3.2",
        "description": "Verify that users have a method to remove or export their data on demand.",
        "cwe_ids": [
            212
        ],
        "nist": [],
        "feature_name": "Ensure users can remove or export their data",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": []
    },
    {
        "category": "Data Protection",
        "sub_category": "Sensitive Private Data",
        "id": "ASVS-8.3.3",
        "description": "Verify that users are provided clear language regarding collection and use of supplied personal information and that users have provided opt-in consent for the use of that data before it is used in any way.",
        "cwe_ids": [
            285
        ],
        "nist": [],
        "feature_name": "Inform users clearly about the collection and use of personal data, and use it only after opt-in consent.",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": []
    },
    {
        "category": "Data Protection",
        "sub_category": "Sensitive Private Data",
        "id": "ASVS-8.3.4",
        "description": "Verify that all sensitive data created and processed by the application has been identified, and ensure that a policy is in place on how to deal with sensitive data.",
        "cwe_ids": [
            200
        ],
        "nist": [],
        "feature_name": "Identify sensitive data and subject it to a policy",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": [
            "https://owasp-top-10-proactive-controls-2018.readthedocs.io/en/latest/c8-protect-data-everywhere.html"
        ]
    },
    {
        "category": "Data Protection",
        "sub_category": "Sensitive Private Data",
        "id": "ASVS-8.3.5",
        "description": "Verify accessing sensitive data is audited (without logging the sensitive data itself), if the data is collected under relevant data protection directives or where logging of access is required.",
        "cwe_ids": [
            532
        ],
        "nist": [],
        "feature_name": "Log access to sensitive data",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": []
    },
    {
        "category": "Data Protection",
        "sub_category": "Sensitive Private Data",
        "id": "ASVS-8.3.6",
        "description": "Verify that sensitive information contained in memory is overwritten as soon as it is no longer required to mitigate memory dumping attacks, using zeroes or random data.",
        "cwe_ids": [
            226
        ],
        "nist": [],
        "feature_name": "Zeroize sensitive information in memory after use",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": []
    },
    {
        "category": "Data Protection",
        "sub_category": "Sensitive Private Data",
        "id": "ASVS-8.3.7",
        "description": "Verify that sensitive or private information that is required to be encrypted, is encrypted using approved algorithms that provide both confidentiality and integrity.",
        "cwe_ids": [
            327
        ],
        "nist": [],
        "feature_name": "Encrypt sensitive data with algorithms that provide both confidentiality and integrity",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": [
            "https://owasp-top-10-proactive-controls-2018.readthedocs.io/en/latest/c8-protect-data-everywhere.html"
        ]
    },
    {
        "category": "Data Protection",
        "sub_category": "Sensitive Private Data",
        "id": "ASVS-8.3.8",
        "description": "Verify that sensitive personal information is subject to data retention classification, such that old or out of date data is deleted automatically, on a schedule, or as the situation requires.",
        "cwe_ids": [
            285
        ],
        "nist": [],
        "feature_name": "Classify personal data regarding retention so that old or outdated data is deleted",
        "user_story": "TODO",
        "scenarios": {},
        "tags": [],
        "references": []
    }
]